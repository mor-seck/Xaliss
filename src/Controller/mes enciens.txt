<?php
namespace App\Controller;

use App\Entity\Depot;
use App\Entity\Compte;
use App\Entity\Partenaire;
use App\Entity\Utilisateur;
use App\Repository\DepotRepository;
use App\Repository\PhoneRepository;
use App\Repository\CompteRepository;
use Doctrine\ORM\EntityManagerInterface;
use App\Repository\UtilisateurRepository;
use Symfony\Component\HttpFoundation\Request;
use Doctrine\Common\Persistence\ObjectManager;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Doctrine\Common\Persistence\PersistentObject;
use phpDocumentor\Reflection\DocBlock\Serializer;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\VarExporter\Internal\Values;
use Symfony\Component\Serializer\SerializerInterface;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\MoneyType;
use DeepCopy\Filter\Doctrine\DoctrineEmptyCollectionFilter;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Entity;
use Symfony\Component\Validator\Validator\ValidatorInterface;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use App\Form\DepotType;

// CETTE PARTI DU CODE ME PERMET D'AJOUTER UN DEPOT

 /**
 * @Route("/ajouter_depot", name="ajouter_depot",methodS={"POST"})
 */
 public function ajouter_depot(Request $request)
 {
 $values = json_decode($request->getContent());
 $entityManager = $this->getDoctrine()->getManager();
 $utilisateurRepo = $this->getDoctrine()->getRepository(Utilisateur::class);
 $utilisateur = $utilisateurRepo->find($values->utilisateur);
 $compteRepo = $this->getDoctrine()->getRepository(Compte::class)->find($values->compte);
 $depot = new Depot();
 $depot->setUtilisateur($utilisateur);
 $depot->setMontant($values->montant);
 $depot->setDateDepot(new \DateTime);
 $depot->setCompte($compteRepo->setSolde($compteRepo->getSolde() + $values->montant));
 if ($values->montant < 75000) { return new response("la somme doit etres au minimum 75000"); } else { $entityManager->persist($depot);
   $entityManager->flush();
   return new Response("le depot est effectue avec success");
   }
   }

   // CETTE PARTI DU CODE ME PERMET D'AJOUTER UN CAISSIER
   /**
   * @Route("/ajouter_caissier", name="ajouter_caissier",methodS={"POST"})
   * @IsGranted("ROLE_ADMIN_SUP")
   */
   public function ajouter_caissier(Request $request, UserPasswordEncoderInterface $passwordEncoder)
   {

   $values = json_decode($request->getContent());
   $entityManager = $this->getDoctrine()->getManager();
   $partenaireRepo = $this->getDoctrine()->getRepository(Partenaire::class);
   $partenaire = $partenaireRepo->find($values->partenaire);
   $caissier = new Utilisateur();

   $caissier->setUsername($values->username);
   $caissier->setPassword($passwordEncoder->encodePassword($caissier, $values->password));
   $caissier->setRoles($values->roles);
   $caissier->setPrenom($values->prenom);
   $caissier->setNom($values->nom);
   $caissier->setAdresse($values->adresse);
   $caissier->setTelephone($values->telephone);
   $caissier->setEmail($values->email);
   $caissier->setStatut("Actif");
   $caissier->setPartenaire($partenaire);

   $entityManager->persist($caissier);
   $entityManager->flush();
   return new Response("le depot est effectue avec success");
   }

   // CETTE PARTI DU CODE ME PERMET DE MODIFIER UN DEPOT
   /**
   * @Route("/depot/{id}", name="update_depo", methods={"PUT"})
   * @IsGranted("ROLE_CAISSIER")
   *
   */
   public function updatedepot(SerializerInterface $serializer, Request $request, Compte $compte, ValidatorInterface $validator, EntityManagerInterface $entityManager)
   {
   $compteUpdate = $entityManager->getRepository(Compte::class)->find($compte->getId());
   $data = json_decode($request->getContent());
   foreach ($data as $key => $value) {
   if ($key && !empty($value)) {
   $name = ucfirst($key);
   $setter = 'set' . $name;
   $compteUpdate->$setter($compte->getSolde() - $value);
   }
   }
   $errors = $validator->validate($compteUpdate);
   if (count($errors)) {
   $errors = $serializer->serialize($errors, 'json');
   return new Response($errors, 500, [
   'Content-Type' => 'application/json'
   ]);
   }
   $entityManager->flush();
   return new JsonResponse($data);
   }

   // CETTE PARTI DU CODE ME PERMET DE MODIFIER UN BLQUER UN PARTENAIRE
   /**
   * @Route("/utilisateur/{id}", name="update_utilisateur", methods={"PUT"})
   * @IsGranted("ROLE_ADMIN_SUP")
   */
   public function bloquer_partenaire(SerializerInterface $serializer, Request $request, Utilisateur $utilisateur, ValidatorInterface $validator, EntityManagerInterface $entityManager)
   {
   $utilisateurUpdate = $entityManager->getRepository(Utilisateur::class)->find($utilisateur->getId());
   $data = json_decode($request->getContent());
   foreach ($data as $key => $value) {
   if ($key && !empty($value)) {
   $name = ucfirst($key);
   $setter = 'set' . $name;
   $utilisateurUpdate->$setter($value);
   }
   }
   $errors = $validator->validate($utilisateurUpdate);
   if (count($errors)) {
   $errors = $serializer->serialize($errors, 'json');
   return new Response($errors, 500, [
   'Content-Type' => 'application/json'
   ]);
   }
   $entityManager->flush();
   return new JsonResponse($data);
   }
   // CETTE PARTI DU CODE ME PERMET DE MODIFIER UN BLQUER UN PARTENAIRE
   /**
   * @Route("/compte/{id}", name="update_compte", methods={"PUT"})
   */
   public function affectation_caiss(SerializerInterface $serializer, Request $request, Compte $compte, ValidatorInterface $validator, EntityManagerInterface $entityManager)
   {
   $compteUpdate = $entityManager->getRepository(Compte::class)->find($compte->getId());
   $data = json_decode($request->getContent());
   foreach ($data as $key => $value) {
   if ($key && !empty($value)) {
   $name = ucfirst($key);
   $setter = 'set' . $name;
   $compteUpdate->$setter($value);
   }
   }
   $errors = $validator->validate($compteUpdate);
   if (count($errors)) {
   $errors = $serializer->serialize($errors, 'json');
   return new Response($errors, 500, [
   'Content-Type' => 'application/json'
   ]);
   }
   $entityManager->flush();
   return new JsonResponse($data);
   }

//////////////encien register////////////////////////

 $values = json_decode($request->getContent());

        if (isset($values->username, $values->password)) {

            $values        = json_decode($request->getContent());
            $entityManager = $this->getDoctrine()->getManager();

            $partenaire = new Partenaire();
            $partenaire->setRaisonSociale($values->raisonSociale);
            $partenaire->setNinea($values->ninea);

            $utilisateur = new Utilisateur();
            $utilisateur->setUsername($values->username);
            $utilisateur->setPassword($passwordEncoder->encodePassword($utilisateur, $values->password));
            $utilisateur->setRoles($values->roles);
            $utilisateur->setPrenom($values->prenom);
            $utilisateur->setNom($values->nom);
            $utilisateur->setAdresse($values->adresse);
            $utilisateur->setTelephone($values->telephone);
            $utilisateur->setEmail($values->email);
            $utilisateur->setStatut($values->statut);
            $utilisateur->setPartenaire($partenaire);
            $utilisateur->setImageName($values->imageName);
            
            $compte = new Compte();
            $compte->setPartenaire($partenaire);
            $compte->setNumCompte(rand(000000000000000,9999999999999999));
            $compte->setSolde($values->solde);
            $compte->setUtilisateur($utilisateur);

            $entityManager->persist($utilisateur);
            $entityManager->persist($partenaire);
            $entityManager->persist($compte);
            $entityManager->flush();

            $data = [
                'status1'  => 201,
                'message1' => "L'utilisateur a été créé"
            ];

            return new JsonResponse($data, 201);
        }
        $data = [
            'status'  => 500,
            'message' => 'Vous devez renseigner les clés username et password'
        ];
        return new JsonResponse($data, 500);




////////////////////fin///////////////////////////

/////////////////////////////////////////////////////



////////////// MON BON CODE/////////////////////////
 public function register(Request $request, UserPasswordEncoderInterface $passwordEncoder, EntityManagerInterface $entityManager)
    {

        $partenaire = new Partenaire();
        $form  = $this->createForm(PartenaireType::class, $partenaire);
        $data = $request->request->all();
        $form->submit($data);
        if ($form->isSubmitted()) {
            $entityManager->persist($partenaire);
        }

        $utilisateur = new Utilisateur();
        $form1  = $this->createForm(UtilisateurType::class, $utilisateur);
        $form1->submit($data);
        if ($form1->isSubmitted()) {
            $utilisateur->setPassword($passwordEncoder->encodePassword($utilisateur, $data['password']));
            $utilisateur->setStatut("Actif");
            $utilisateur->setRoles(["ROLE_ADMIN_PARTENAIRE"]);
            $file     = $request->files->all()['image'];
            $fileName = md5(uniqid()) . '.' . $file->guessExtension();
            $file->move($this->getParameter('image'), $fileName);
            $utilisateur->setImage($fileName);
            $utilisateur->setPartenaire($partenaire);
            $entityManager->persist($partenaire);
        }

        $compte = new Compte();
        $form2  = $this->createForm(CompteType::class, $compte);
        $form2->submit($data);
        if ($form2->isSubmitted()) {      
            $compte->setPartenaire($partenaire);
            $compte->setNumCompte(rand(000000000000000, 9999999999999999));
            $compte->setUtilisateur($utilisateur);

            $entityManager->persist($compte);
            $entityManager->flush();
            return new Response('okkkk');
        }
        return new Response('ko');
    }



	//=================TRANSACTION ENVOI

		/**
     * @Route("/transation/envoie", name="transation_envoie")
     */
    public function envois(Request $request,ObjectManager $manager,ValidatorInterface $validator,TarifsRepository $repoTarif,UserCompteActuelRepository $repoUserComp,CompteRepository $repoCompt,UserInterface $userConnecte)
    {      
        $envoie=new Transaction();
        $form = $this->createForm(EnvoieType::class,$envoie);
        $data = json_decode($request->getContent(),true);
        if(!$data){
            $data=$request->request->all();
        }
        $form->submit($data);
        if(!$form->isSubmitted() || !$form->isValid()){
            return $this->handleView($this->view($validator->validate($form)));
        }
       
        $montant = $envoie->getMontant(); 
        $tarifs  = $repoTarif->findAll();
        for($i=0;$i<count($tarifs);$i++){
            $borneeInf=$tarifs[$i]->getBorneInferieure();
            $borneSup=$tarifs[$i]->getBorneSuperieure();
            
            if($borneeInf<=$montant && $montant<=$borneSup){
                if(2000001<=$montant && $montant<=3000000){
                     $frais=$montant*0.02; break;
                }else{
                    $frais=$tarifs[$i]->getValeur(); break;
                }
            }
        }
        
        $commissionEmetteur=$frais*0.2;
        $commissionSAT=$frais*0.4;
        $taxesEtat=$frais*0.3;
        
        $userComp=$repoUserComp->findUserComptActu($userConnecte);
        if(!$userComp){
            throw new HttpException(403,'Vous n\'etes rattachéà aucun compte !');
        }
        elseif($userComp->getCompte()->getSolde()<$montant){
            throw new HttpException(403,'Le solde de votre compte ne vous permet pas de traiter cette transaction !');
        }
        $code=date('s').date('i').' '.date('H').date('d').' '.date('m').date('Y');
        $envoie->setDateEnvoi(new \DateTime())
               ->setCode($code)
               ->setFrais($frais)
               ->setCommissionEmetteur($commissionEmetteur)
               ->setCommissionWari( $commissionSAT)
               ->setTaxesEtat($taxesEtat)
               ->setUserComptePartenaireEmetteur($userComp)
               ->setStatus('Envoyer');
        $manager->persist($envoie);
        $compteSAT=$repoCompt->findOneBy(['numeroCompte'=>'1910 1409 0043']);
        $compteSAT->setSolde($compteSAT->getSolde()+ $commissionSAT);
        $manager->persist($compteSAT);
        $compteEtat=$repoCompt->findOneBy(['numeroCompte'=>'0221 0445 0443']);
        $compteEtat->setSolde($compteEtat->getSolde()+$taxesEtat);
        $manager->persist($compteEtat);
        $userComp->getCompte()->setSolde($userComp->getCompte()->getSolde()+$commissionEmetteur-$montant-$frais);//ancien solde - montant - 80% frais
        $manager->persist($userComp);
        $manager->flush();
        $afficher = $this->recuDeTransaction('envoi',$envoie);
        return $this->handleView($this->view($afficher,Response::HTTP_CREATED));
    }

	//=========================FIN TRANSACTION==========================================
	//=========================FIN TRANSACTION==========================================
	//=========================FIN TRANSACTION==========================================
	//================FIN TRANSACTION==========================================
	//================FIN TRANSACTION==========================================
	//================FIN TRANSACTION==========================================

    /**
     * @Route("/faire/envoie", name="envoyer_argent", methods={"POST"})
     * @IsGranted("ROLE_Utilisateur", message="Seul un utilisateur est habilité à effectuer une transaction")
     */
    public function envoyerArgent(Request $request, CommissionRepository $commissionRepository, CompteRepository $compteRepository)
    {
        $values = $request->request->all();
        $montant = 'montantEnvoyer';
        $montants = 'montantEnvoyer';
        $i=0;
        $connect = $this->getDoctrine()->getManager();
        $transaction = new Transaction();
        $form = $this->createForm(TransactionType::class, $transaction);
        $errors = [];
        $form->submit($values);
        if($form->isSubmitted()){
            $tester=$commissionRepository->findAll();
            while ($i<count($tester)) {
                if ($values[$montant]<=$tester[$i]->getBorneSuperieure() && $values[$montant]>=$tester[$i]->getBorneInferieure()) {
                    $montant = $tester[$i]->getValeur();
                    break;
                }
                $i++;
            }
            if (!is_numeric($montant)) {
                $errors[] = "On ne peut pas faire une transaction pour ce somme";
            }
            $transaction->setCommissionTTC($tester[$i]);
            $transaction->setType(false);
            $transaction->setUtilisateur($this->getUser());
            $transaction->setTotalEnvoyer($values[$montants]+ $montant);
            $transaction->setNumeroTransaction(rand(100000000,999999999));
            $transaction->setDateEnvoie(new \DateTime());
            $transaction->setCommissionEtat(($montant*30)/100);
            $transaction->setCommissionWari(($montant*40)/100);
            $transaction->setCommissionEnvoi(($montant*10)/100);
            $comptepartenaire = $this->getUser()->getCompte();
            if ($comptepartenaire == NULL || $comptepartenaire->getPartenaire()!=$this->getUser()->getPartenaire() || $comptepartenaire->getSolde()<= $values[$montants]+ $montant) {
                $errors[]='Vous ne pouvez pas faire de transaction car on ne vous a pas assigné de compte ou Vous êtes un Hacker ou solde insuffisant';
            }
            if ($errors) {
                return $this->json([
                    'errors' => $errors
                ], 400);
            }
            $comptepartenaire->setSolde($comptepartenaire->getSolde() - ($values[$montants]+ $montant) + (($montant*10)/100));
            $connect->persist($transaction);
            $connect->flush();
                return $this->json([
                    'code' => 200,
                    'message' =>'Envoie Argent fait avec succès'
                ]);
        }
        return $this->json([
            'status' => 500,
            'message0' =>'Une erreurs s\'est produite: il y\'a des champs manquantes ou ce transaction existe déja'
        ]);
    }
    /**
     * @Route("/faire/retrait/{id}", name="retrait_argent", methods={"PUT","POST"})
     * @IsGranted("ROLE_Utilisateur", message="Seul un utilisateur est habilité à effectuer une transaction")
     */
    public function retraitArgent(Request $request, CompteRepository $compteRepository,EntityManagerInterface $entityManager, Transaction $transaction=null)
    {
        $values = $request->request->all();
        
        if ($transaction==NULL) {
            $errors[] = 'cet transaction n\'existe pas dans la base' ;
        }
        if ($transaction->getType()) {
            $data = [
                'status' => 400,
                'message3' => "Le retrait de ce transaction est deja fait"
            ];
            return new JsonResponse($data,200);
        }
        $envoyeur=$transaction->getUtilisateur();
        $form = $this->createForm(TransactionType::class, $transaction);
        $form->submit($values);
        $errors = [];
        
        if($form->isSubmitted()){
            $transaction->setUtilisateur($envoyeur);
            $transaction->setUserRetrait($this->getUser());
            $transaction->setTotalEnvoyer($transaction->getTotalEnvoyer());
            $transaction->setDateRetrait(new \DateTime());
            $transaction->setType(true);
            $transaction->setMontantRetirer($transaction->getTotalEnvoyer() - $transaction->getCommissionTTC()->getValeur());
            $transaction->setCommissionRetrait(($transaction->getCommissionTTC()->getValeur()*20)/100);
            $comptepartenaire = $this->getUser()->getCompte();
            if ($comptepartenaire == NULL || $comptepartenaire->getPartenaire()!=$this->getUser()->getPartenaire()) {
                $errors[]='Vous ne pouvez pas faire de transaction car on ne vous a pas assigné de compte ou Vous êtes un Hacker';
            }
            if (!$errors) {
                $comptepartenaire->setSolde($comptepartenaire->getSolde() + ($transaction->getTotalEnvoyer() - $transaction->getCommissionTTC()->getValeur()) + ($transaction->getCommissionTTC()->getValeur()*20)/100);
                $entityManager->persist($transaction);
                $compteEtat = $compteRepository->findByNumeroCompte(1960196019604);
                $compteWari = $compteRepository->findByNumeroCompte(2019201920190);
                $compteEtat[0]->setSolde($transaction->getCommissionEtat());
                $compteWari[0]->setSolde($transaction->getCommissionWari());
                $entityManager->flush();
                $data = [
                    'status3' => 200,
                    'message3' => "Le retrait est fait avec succès.",
                    'montant retirer' => $transaction->getMontantRetirer()
                ];
                return new JsonResponse($data,200);
            } else {
                return $this->json([
                    'errors' => $errors
                ], 400);
            }
        }
    }
    /**
     * @Route("/lister/transaction", name="lister_transaction", methods={"POST", "GET"})
     */
    public function listertransaction(TransactionRepository $transactionRepository) : Response
    {
       $transaction = $transactionRepository->findAll();
       $encoders = [new JsonEncoder()]; // If no need for XmlEncoder
       $normalizers = [new ObjectNormalizer()];
       $serializer = new Serializer($normalizers, $encoders);
       
       // Serialize your object in Json
       $jsonObject = $serializer->serialize($transaction, 'json', [
           'circular_reference_handler' => function ($object) {
               return $object->getId();
           }
       ]);
       
       // For instance, return a Response with encoded Json
       return new Response($jsonObject, 200, ['Content-Type' => 'application/json']);
    }