import { Directive, ElementRef, Input, Renderer2, Pipe, ContentChild, Component, EventEmitter, forwardRef, Inject, Output, ContentChildren, ViewChildren, HostListener, ViewChild, NgModule } from '@angular/core';
import { debounceTime } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';
import { POPUP_DIALOG_CLOSE, PopupDialogService, NgxPopupDialogModule } from 'ngx-popup-dialog';
import { ListKeyManager } from '@angular/cdk/a11y';
import { UP_ARROW, DOWN_ARROW, ENTER } from '@angular/cdk/keycodes';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatChipsModule } from '@angular/material/chips';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatSelectModule } from '@angular/material/select';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatRadioModule } from '@angular/material/radio';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';

function isBlank(obj) {
    return obj === undefined || obj === null;
}
var HideDirective = /** @class */ (function () {
    function HideDirective(_elementRef, renderer) {
        this._elementRef = _elementRef;
        this.renderer = renderer;
        this._prevCondition = false;
    }
    Object.defineProperty(HideDirective.prototype, "hide", {
        set: function (newCondition) {
            this.initDisplayStyle();
            if (newCondition && (isBlank(this._prevCondition) || !this._prevCondition)) {
                this._prevCondition = true;
                this.renderer.setStyle(this._elementRef.nativeElement, 'display', 'none');
            }
            else if (!newCondition && (isBlank(this._prevCondition) || this._prevCondition)) {
                this._prevCondition = false;
                this.renderer.setStyle(this._elementRef.nativeElement, 'display', this._displayStyle);
            }
        },
        enumerable: true,
        configurable: true
    });
    HideDirective.prototype.initDisplayStyle = function () {
        if (this._displayStyle === undefined) {
            var displayStyle = this._elementRef.nativeElement.style.display;
            if (displayStyle !== 'none') {
                this._displayStyle = displayStyle;
            }
        }
    };
    return HideDirective;
}());
HideDirective.decorators = [
    { type: Directive, args: [{
                selector: '[hide]'
            },] },
];
HideDirective.ctorParameters = function () { return [
    { type: ElementRef },
    { type: Renderer2 }
]; };
HideDirective.propDecorators = {
    hide: [{ type: Input }]
};
var MinPipe = /** @class */ (function () {
    function MinPipe() {
    }
    MinPipe.prototype.transform = function (value, args) {
        return Math.min.apply(null, value);
    };
    return MinPipe;
}());
MinPipe.decorators = [
    { type: Pipe, args: [{
                name: 'min'
            },] },
];
var PixelConverter = /** @class */ (function () {
    function PixelConverter() {
    }
    PixelConverter.prototype.transform = function (value, args) {
        if (value === undefined) {
            return;
        }
        if (typeof value === 'string') {
            return value;
        }
        if (typeof value === 'number') {
            return value + 'px';
        }
    };
    return PixelConverter;
}());
PixelConverter.decorators = [
    { type: Pipe, args: [{
                name: 'px'
            },] },
];
var DataTableResource = /** @class */ (function () {
    function DataTableResource(items) {
        this.items = items;
    }
    DataTableResource.prototype.query = function (params, filter) {
        var result = [];
        if (filter) {
            result = this.items.filter(filter);
        }
        else {
            result = this.items.slice();
        }
        if (params.sortBy) {
            result.sort((function (a, b) {
                if (typeof a[params.sortBy] === 'string') {
                    return a[params.sortBy].localeCompare(b[params.sortBy]);
                }
                else {
                    return a[params.sortBy] - b[params.sortBy];
                }
            }));
            if (params.sortAsc === false) {
                result.reverse();
            }
        }
        if (params.offset !== undefined) {
            if (params.limit === undefined) {
                result = result.slice(params.offset, result.length);
            }
            else {
                result = result.slice(params.offset, params.offset + params.limit);
            }
        }
        return new Promise((function (resolve, reject) {
            setTimeout((function () { return resolve(result); }));
        }));
    };
    DataTableResource.prototype.count = function () {
        var _this_1 = this;
        return new Promise((function (resolve, reject) {
            setTimeout((function () { return resolve(_this_1.items.length); }));
        }));
    };
    return DataTableResource;
}());
var DataTableColumnDirective = /** @class */ (function () {
    function DataTableColumnDirective() {
        this.styleClassObject = {};
        this.sortable = false;
        this.resizable = false;
        this.visible = true;
    }
    DataTableColumnDirective.prototype.getCellColor = function (row, index) {
        if (this.cellColors !== undefined) {
            return (((this.cellColors)))(row.item, row, this, index);
        }
    };
    DataTableColumnDirective.prototype.ngOnInit = function () {
        this._initCellClass();
    };
    DataTableColumnDirective.prototype._initCellClass = function () {
        var _a;
        if (!this.styleClass && this.property) {
            if (/^[a-zA-Z0-9_]+$/.test(this.property)) {
                this.styleClass = 'column-' + this.property;
            }
            else {
                this.styleClass = 'column-' + this.property.replace(/[^a-zA-Z0-9_]/g, '');
            }
        }
        if (this.styleClass != null) {
            this.styleClassObject = (_a = {}, _a[this.styleClass] = true, _a);
        }
    };
    return DataTableColumnDirective;
}());
DataTableColumnDirective.decorators = [
    { type: Directive, args: [{
                selector: 'data-table-column'
            },] },
];
DataTableColumnDirective.propDecorators = {
    header: [{ type: Input }],
    sortable: [{ type: Input }],
    resizable: [{ type: Input }],
    property: [{ type: Input }],
    styleClass: [{ type: Input }],
    cellColors: [{ type: Input }],
    width: [{ type: Input }],
    visible: [{ type: Input }],
    cellTemplate: [{ type: ContentChild, args: ['dataTableCell',] }],
    headerTemplate: [{ type: ContentChild, args: ['dataTableHeader',] }]
};
var DataTableRowComponent = /** @class */ (function () {
    function DataTableRowComponent(dataTable, renderer, elementRef) {
        this.dataTable = dataTable;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this._this = this;
        this._listeners = [];
        this.selectedChange = new EventEmitter();
    }
    Object.defineProperty(DataTableRowComponent.prototype, "selected", {
        get: function () {
            return this._selected;
        },
        set: function (selected) {
            this._selected = selected;
            this.selectedChange.emit(selected);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableRowComponent.prototype, "displayIndex", {
        get: function () {
            if (this.dataTable.pagination) {
                return this.dataTable.displayParams.offset + this.index + 1;
            }
            else {
                return this.index + 1;
            }
        },
        enumerable: true,
        configurable: true
    });
    DataTableRowComponent.prototype.getTooltip = function () {
        if (this.dataTable.rowTooltip) {
            return this.dataTable.rowTooltip(this.item, this, this.index);
        }
        return '';
    };
    DataTableRowComponent.prototype.ngOnInit = function () {
        var _this_1 = this;
        if (this.dataTable.rowClick.observers.length > 0) {
            this._listeners.push(this.renderer.listen(this.elementRef.nativeElement, 'click', (function (event) { return _this_1.dataTable.rowClicked(_this_1, event); })));
        }
        if (this.dataTable.rowDoubleClick.observers.length > 0) {
            this._listeners.push(this.renderer.listen(this.elementRef.nativeElement, 'dblclick', (function (event) { return _this_1.dataTable.rowDoubleClicked(_this_1, event); })));
        }
    };
    DataTableRowComponent.prototype.ngOnDestroy = function () {
        this.selected = false;
        this._listeners.forEach((function (fn) { return fn(); }));
    };
    return DataTableRowComponent;
}());
DataTableRowComponent.decorators = [
    { type: Component, args: [{
                selector: '[dataTableRow]',
                template: "<tr class=\"data-table-row\"\n    [title]=\"getTooltip()\"\n    [style.background-color]=\"dataTable.getRowColor(item, index, _this)\"\n    [class.row-odd]=\"index % 2 === 0\"\n    [class.row-even]=\"index % 2 === 1\"\n    [class.selected]=\"selected\"\n    [class.clickable]=\"dataTable.selectOnRowClick\">\n  <td [hide]=\"!dataTable.expandColumnVisible\">\n    <button (click)=\"expanded = !expanded; $event.stopPropagation()\" class=\"row-expand-button\"\n         [attr.aria-expanded]=\"expanded\"\n         [title]=\"dataTable.labels.expandRow.replace('{cell_content}', ''+item[dataTable.primaryColumn])\"\n         [attr.aria-label]=\"dataTable.labels.expandRow.replace('{cell_content}', ''+item[dataTable.primaryColumn])\">\n      <i [ngClass]=\"{'fa-caret-right': !expanded, 'fa-caret-down': expanded}\" class=\"fa fa-lg\" aria-hidden=\"true\"></i>\n    </button>\n  </td>\n  <td [hide]=\"!dataTable.indexColumnVisible\" class=\"index-column\" [textContent]=\"displayIndex\"></td>\n  <td [hide]=\"!dataTable.selectColumnVisible\" class=\"select-column\">\n    <input type=\"checkbox\" [(ngModel)]=\"selected\"\n           [title]=\"dataTable.labels.selectRow.replace('{cell_content}', ''+item[dataTable.primaryColumn])\"\n           [attr.aria-label]=\"dataTable.labels.selectRow.replace('{cell_content}', ''+item[dataTable.primaryColumn])\"/>\n  </td>\n  <ng-template ngFor [ngForOf]=\"dataTable.columns\" let-column>\n    <th *ngIf=\"dataTable.primaryColumn === column.property\" scope=\"row\" [hide]=\"!column.visible\" [ngClass]=\"column.styleClassObject\"\n        class=\"data-column\" [attr.data-label]=\"column.header\"\n        [style.background-color]=\"column.getCellColor(_this, index)\">\n      <div *ngIf=\"!column.cellTemplate\" [textContent]=\"item[column.property]\"></div>\n      <div *ngIf=\"column.cellTemplate\" [ngTemplateOutlet]=\"column.cellTemplate\"\n           [ngTemplateOutletContext]=\"{column: column, row: _this, item: item}\"></div>\n    </th>\n    <td *ngIf=\"dataTable.primaryColumn !== column.property\" [hide]=\"!column.visible\" [ngClass]=\"column.styleClassObject\"\n        class=\"data-column\" [attr.data-label]=\"column.header\"\n        [style.background-color]=\"column.getCellColor(_this, index)\">\n      <div *ngIf=\"!column.cellTemplate\" [textContent]=\"item[column.property]\"></div>\n      <div *ngIf=\"column.cellTemplate\" [ngTemplateOutlet]=\"column.cellTemplate\"\n           [ngTemplateOutletContext]=\"{column: column, row: _this, item: item}\"></div>\n    </td>\n  </ng-template>\n</tr>\n<tr *ngIf=\"dataTable.expandableRows\" [hide]=\"!expanded\" class=\"row-expansion\">\n  <td [attr.colspan]=\"dataTable.columnCount\">\n    <div [ngTemplateOutlet]=\"dataTable.expandTemplate\" [ngTemplateOutletContext]=\"{row: _this, item: item}\"></div>\n  </td>\n</tr>\n",
                styles: [".select-column{text-align:center}.row-expand-button{-webkit-box-sizing:content-box;box-sizing:content-box;background:0 0;border:0;color:inherit;cursor:pointer;font:inherit;line-height:normal;overflow:visible;padding:.15rem .75rem;-webkit-appearance:button;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none}.clickable{cursor:pointer}th{font-weight:initial}"]
            },] },
];
DataTableRowComponent.ctorParameters = function () { return [
    { type: DataTableComponent, decorators: [{ type: Inject, args: [forwardRef((function () { return DataTableComponent; })),] }] },
    { type: Renderer2 },
    { type: ElementRef }
]; };
DataTableRowComponent.propDecorators = {
    item: [{ type: Input }],
    index: [{ type: Input }],
    selectedChange: [{ type: Output }]
};
var defaultTranslations = {
    headerReload: 'reload {title} table',
    headerColumnSelector: 'column selector - adds or removes columns from {title} table',
    headerColumnSelectorAdded: '{column_name} added to {title} table',
    headerColumnSelectorRemoved: '{column_name} removed from {title} table',
    indexColumn: 'index',
    selectColumn: 'select',
    selectRow: 'select {cell_content}',
    selectAllRows: 'select all rows',
    expandColumn: 'expand',
    expandRow: 'expand {cell_content}',
    sortedAscending: '{title} table sorted by {header} ascending',
    sortedDescending: '{title} table sorted by {header} descending',
    sortAscending: 'activate to sort ascending',
    sortDescending: 'activate to sort descending',
    paginationLimit: 'Limit',
    paginationText: 'Results: {from} to {to} of {total}',
    paginationTotalPages: 'of',
    firstPage: 'first page',
    prevPage: 'previous page',
    pageNumberLabel: 'Page',
    pageNumber: 'page number',
    pageNumberNofM: '({N} of {M})',
    nextPage: 'next page',
    lastPage: 'last page',
    loadingText: '{title} table is loading',
    loadedText: '{title} table loaded',
    addFilter: 'Add filter',
    searchField: 'Search Field',
    selectedValueRequired: 'You must select a value',
    validDateRequired: 'You must enter valid date',
    valueRequired: 'You must enter a value',
    numericValueRequired: 'You must enter a numeric value',
    apply: 'Apply',
    value: 'Value',
    date: 'Date',
    not: 'Not',
    filterOperators: {
        'lt': '<',
        'gt': '>',
        'lte': '<=',
        'gte': '>=',
        'eq': '=',
        'ne': 'not equal to',
        'contains': 'contains',
        'not_contains': 'not contains',
        'starts': 'starts with',
        'ends': 'ends with',
        'empty': 'is empty',
        'true': 'true',
        'false': 'false'
    }
};
function drag(event, _a) {
    var move = _a.move, up = _a.up;
    var startX = event.pageX;
    var startY = event.pageY;
    var x = startX;
    var y = startY;
    var moved = false;
    function mouseMoveHandler(evt) {
        var dx = evt.pageX - x;
        var dy = evt.pageY - y;
        x = evt.pageX;
        y = evt.pageY;
        if (dx || dy) {
            moved = true;
        }
        move(evt, dx, dy, x, y);
        event.preventDefault();
    }
    function mouseUpHandler(evt) {
        x = evt.pageX;
        y = evt.pageY;
        document.removeEventListener('mousemove', mouseMoveHandler);
        document.removeEventListener('mouseup', mouseUpHandler);
        if (up) {
            up(event, x, y, moved);
        }
    }
    document.addEventListener('mousemove', mouseMoveHandler);
    document.addEventListener('mouseup', mouseUpHandler);
}
var nextId = 0;
var DataTableComponent = /** @class */ (function () {
    function DataTableComponent() {
        this._items = [];
        this.title = '';
        this.showTitle = true;
        this.header = true;
        this.pagination = true;
        this.indexColumn = true;
        this.indexColumnHeader = '';
        this.selectColumn = false;
        this.multiSelect = true;
        this.substituteRows = true;
        this.expandableRows = false;
        this.selectOnRowClick = false;
        this.autoReload = true;
        this.showReloading = false;
        this.pageLimits = [10, 25, 50, 100, 250];
        this.primaryColumn = '';
        this.tableCssClass = '';
        this.tableContainerCssClass = '';
        this.reload = new EventEmitter();
        this.rowClick = new EventEmitter();
        this.rowDoubleClick = new EventEmitter();
        this.headerClick = new EventEmitter();
        this.cellClick = new EventEmitter();
        this.refreshClick = new EventEmitter();
        this.filterAdded = new EventEmitter();
        this.filterRemoved = new EventEmitter();
        this.filterUpdated = new EventEmitter();
        this.filterChanged = new EventEmitter();
        this._displayParams = (({}));
        this.subject = new Subject();
        this.notifier = new Subject();
        this.selectedRows = [];
        this.id = "datatable-" + nextId++;
        this._selectAllCheckbox = false;
        this._resizeInProgress = false;
        this.resizeLimit = 30;
        this._reloading = false;
        this._sortAsc = true;
        this._offset = 0;
        this._limit = 10;
    }
    Object.defineProperty(DataTableComponent.prototype, "items", {
        get: function () {
            return this._items;
        },
        set: function (items) {
            this._items = items;
            this._onReloadFinished();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableComponent.prototype, "itemCount", {
        get: function () {
            return this._itemCount;
        },
        set: function (count) {
            this._itemCount = count;
            this.notifier.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableComponent.prototype, "reloading", {
        get: function () {
            return this._reloading;
        },
        set: function (val) {
            this._reloading = val;
            this.notifier.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableComponent.prototype, "sortBy", {
        get: function () {
            return this._sortBy;
        },
        set: function (value) {
            this._sortBy = value;
            this.subject.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableComponent.prototype, "sortAsc", {
        get: function () {
            return this._sortAsc;
        },
        set: function (value) {
            this._sortAsc = value;
            this.subject.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableComponent.prototype, "offset", {
        get: function () {
            return this._offset;
        },
        set: function (value) {
            this._offset = value;
            this.subject.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableComponent.prototype, "limit", {
        get: function () {
            return this._limit;
        },
        set: function (value) {
            this._limit = value;
            this.subject.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableComponent.prototype, "page", {
        get: function () {
            return this.itemCount !== 0 ? Math.floor(this.offset / this.limit) + 1 : 0;
        },
        set: function (value) {
            this.offset = (value - 1) * this.limit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableComponent.prototype, "lastPage", {
        get: function () {
            return Math.ceil(this.itemCount / this.limit);
        },
        enumerable: true,
        configurable: true
    });
    DataTableComponent.prototype.sort = function (sortBy, asc) {
        this.sortBy = sortBy;
        this.sortAsc = asc;
    };
    DataTableComponent.prototype.ngOnInit = function () {
        var _this_1 = this;
        this._initDefaultValues();
        this._initDefaultClickEvents();
        this._updateDisplayParams();
        if (this.pageLimits.indexOf(this.limit) < 0) {
            this.limit = this.pageLimits[0];
        }
        this.labels = Object.assign({}, defaultTranslations, this.labels);
        if (this.autoReload) {
            this.reloadItems();
        }
        this.notifier$ = this.notifier.subscribe((function () { return _this_1._notify(); }));
        this.subject$ = this.subject.pipe(debounceTime(100)).subscribe((function () { return _this_1.reloadItems(); }));
    };
    DataTableComponent.prototype._initDefaultValues = function () {
        this.indexColumnVisible = this.indexColumn;
        this.selectColumnVisible = this.selectColumn;
        this.expandColumnVisible = this.expandableRows;
    };
    DataTableComponent.prototype._initDefaultClickEvents = function () {
        var _this_1 = this;
        this.headerClick.subscribe((function (tableEvent) { return _this_1.sortColumn(tableEvent.column); }));
        if (this.selectOnRowClick) {
            this.rowClick.subscribe((function (tableEvent) { return tableEvent.row.selected = !tableEvent.row.selected; }));
        }
    };
    DataTableComponent.prototype.reloadItems = function () {
        this.reloading = true;
        this.reload.emit(this._getRemoteParameters());
    };
    DataTableComponent.prototype._onReloadFinished = function () {
        if (this.reloading) {
            this._updateDisplayParams();
            this._selectAllCheckbox = false;
            this.reloading = false;
        }
    };
    Object.defineProperty(DataTableComponent.prototype, "displayParams", {
        get: function () {
            return this._displayParams;
        },
        enumerable: true,
        configurable: true
    });
    DataTableComponent.prototype._updateDisplayParams = function () {
        this._displayParams = {
            sortBy: this.sortBy,
            sortAsc: this.sortAsc,
            offset: this.offset,
            limit: this.limit
        };
    };
    DataTableComponent.prototype.rowClicked = function (row, event) {
        this.rowClick.emit({ row: row, event: event });
    };
    DataTableComponent.prototype.rowDoubleClicked = function (row, event) {
        this.rowDoubleClick.emit({ row: row, event: event });
    };
    DataTableComponent.prototype.headerClicked = function (column, event) {
        if (!this._resizeInProgress) {
            event.preventDefault();
            event.stopPropagation();
            this.headerClick.emit({ column: column, event: event });
        }
        else {
            this._resizeInProgress = false;
        }
    };
    DataTableComponent.prototype.cellClicked = function (column, row, event) {
        this.cellClick.emit({ row: row, column: column, event: event });
    };
    DataTableComponent.prototype._getRemoteParameters = function () {
        var params = (({}));
        if (this.sortBy) {
            params.sortBy = this.sortBy;
            params.sortAsc = this.sortAsc;
        }
        if (this.pagination) {
            params.offset = this.offset;
            params.limit = this.limit;
        }
        return params;
    };
    DataTableComponent.prototype.sortColumn = function (column) {
        if (column.sortable) {
            var ascending = this.sortBy === column.property ? !this.sortAsc : true;
            this.sort(column.property, ascending);
        }
    };
    Object.defineProperty(DataTableComponent.prototype, "columnCount", {
        get: function () {
            var count = 0;
            count += this.indexColumnVisible ? 1 : 0;
            count += this.selectColumnVisible ? 1 : 0;
            count += this.expandColumnVisible ? 1 : 0;
            this.columns.toArray().forEach((function (column) {
                count += column.visible ? 1 : 0;
            }));
            return count;
        },
        enumerable: true,
        configurable: true
    });
    DataTableComponent.prototype.getRowColor = function (item, index, row) {
        if (this.rowColors !== undefined) {
            return (((this.rowColors)))(item, row, index);
        }
    };
    Object.defineProperty(DataTableComponent.prototype, "selectAllCheckbox", {
        get: function () {
            return this._selectAllCheckbox;
        },
        set: function (value) {
            this._selectAllCheckbox = value;
            this._onSelectAllChanged(value);
        },
        enumerable: true,
        configurable: true
    });
    DataTableComponent.prototype._onSelectAllChanged = function (value) {
        this.rows.toArray().forEach((function (row) { return row.selected = value; }));
    };
    DataTableComponent.prototype.onRowSelectChanged = function (row) {
        if (this.multiSelect) {
            var index = this.selectedRows.indexOf(row);
            if (row.selected && index < 0) {
                this.selectedRows.push(row);
            }
            else if (!row.selected && index >= 0) {
                this.selectedRows.splice(index, 1);
            }
        }
        else {
            if (row.selected) {
                this.selectedRow = row;
            }
            else if (this.selectedRow === row) {
                delete this.selectedRow;
            }
        }
        if (row.selected && !this.multiSelect) {
            this.rows.toArray().filter((function (row_) { return row_.selected; })).forEach((function (row_) {
                if (row_ !== row) {
                    row_.selected = false;
                }
            }));
        }
    };
    Object.defineProperty(DataTableComponent.prototype, "substituteItems", {
        get: function () {
            return Array.from({ length: this.displayParams.limit - this.items.length });
        },
        enumerable: true,
        configurable: true
    });
    DataTableComponent.prototype.resizeColumnStart = function (event, column, columnElement) {
        var _this_1 = this;
        this._resizeInProgress = true;
        var startOffset = columnElement.offsetWidth - event.pageX;
        drag(event, {
            move: (function (moveEvent, dx) {
                if (_this_1._isResizeInLimit(columnElement, dx)) {
                    column.width = startOffset + moveEvent.pageX + dx;
                }
            }),
        });
    };
    DataTableComponent.prototype._isResizeInLimit = function (columnElement, dx) {
        if ((dx < 0 && (columnElement.offsetWidth + dx) <= this.resizeLimit) ||
            !columnElement.nextElementSibling ||
            (dx >= 0 && ((((columnElement.nextElementSibling))).offsetWidth + dx) <= this.resizeLimit)) {
            return false;
        }
        return true;
    };
    DataTableComponent.prototype.ngAfterContentInit = function () {
        if (this.primaryColumn === '') {
            this.primaryColumn = (((this.columns.first))).property;
        }
    };
    DataTableComponent.prototype._notify = function () {
        var _this_1 = this;
        var loading = this.reloading;
        this.reloadNotification = loading ?
            this.labels.loadingText.replace('{title}', this.title) :
            this.labels.loadedText.replace('{title}', this.title);
        if (!loading) {
            if (this.pagination) {
                this.paginationNotification = this.labels.paginationText
                    .replace('{from}', '' + (Math.ceil(this.itemCount / this.limit) !== 0 ? this.offset + 1 : '0'))
                    .replace('{to}', '' + (Math.min(this.offset + this.limit, this.itemCount)))
                    .replace('{total}', '' + this.itemCount);
            }
            else {
                this.paginationNotification = '';
            }
            if (this.columns !== undefined && this.sortBy !== undefined) {
                var col = ((this.columns.toArray().find((function (column) { return column.property === _this_1.sortBy; }))));
                this.sortNotification = (this.sortAsc ? this.labels.sortedAscending : this.labels.sortedDescending)
                    .replace('{title}', this.title)
                    .replace('{header}', col.header);
            }
            else {
                this.sortNotification = '';
            }
        }
    };
    DataTableComponent.prototype.ngOnDestroy = function () {
        this.subject$.unsubscribe();
        this.notifier$.unsubscribe();
    };
    return DataTableComponent;
}());
DataTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'data-table',
                template: "<div class=\"data-table-wrapper\">\n  <span class=\"sr-only\" role=\"status\" aria-live=\"polite\" aria-atomic=\"false\" aria-relevant=\"text\">\n    <span [textContent]=\"reloadNotification\"></span>\n    <span [textContent]=\"paginationNotification\"></span>\n    <span [textContent]=\"sortNotification\"></span>\n    <span [textContent]=\"columnSelectorNotification\"></span>\n  </span>\n\n  <data-table-header *ngIf=\"header\"></data-table-header>\n  <filter-bar *ngIf=\"filterableFields && filterableFields.length > 0\"></filter-bar>\n\n  <div class=\"data-table-box {{tableContainerCssClass}}\">\n    <table class=\"table data-table {{tableCssClass}}\" [id]=\"id\">\n      <caption class=\"sr-only\" [textContent]=\"title\"></caption>\n      <thead>\n      <tr>\n        <td [hide]=\"!expandColumnVisible\" class=\"expand-column-header\">\n        </td>\n        <th scope=\"col\" [hide]=\"!indexColumnVisible\" class=\"index-column-header\">\n          <span [textContent]=\"indexColumnHeader\"></span>\n        </th>\n        <td [hide]=\"!selectColumnVisible\" class=\"select-column-header\">\n          <input [hide]=\"!multiSelect\"\n                 type=\"checkbox\"\n                 [(ngModel)]=\"selectAllCheckbox\"\n                 [disabled]=\"itemCount === 0\"\n                 [title]=\"labels.selectAllRows\"\n                 [attr.aria-label]=\"labels.selectAllRows\"/>\n        </td>\n        <th *ngFor=\"let column of columns, index as i\" #th\n            [hide]=\"!column.visible\"\n            [class.sortable]=\"column.sortable\"\n            [class.resizable]=\"column.resizable\"\n            scope=\"col\"\n            [attr.aria-sort]=\"column.sortable ? (column.property === sortBy ? (sortAsc ? 'ascending' : 'descending') : 'none') : null\"\n            [ngClass]=\"column.styleClassObject\" class=\"column-header\" [style.width]=\"column.width | px\" >\n          <button *ngIf=\"column.sortable\" (click)=\"headerClicked(column, $event)\"\n                  [attr.aria-controls]=\"column.sortable ? id : null\"\n                  [disabled]=\"itemCount === 0\"\n                  [attr.aria-labelledby]=\"'col-'+id+'-'+i\"\n                  [title]=\"!sortAsc ? labels.sortAscending : labels.sortDescending\">\n            <span *ngIf=\"!column.headerTemplate\" [id]=\"'col-'+id+'-'+i\"\n                  [textContent]=\"column.header\"></span>\n            <span *ngIf=\"column.headerTemplate\" [ngTemplateOutlet]=\"column.headerTemplate\"\n                  [ngTemplateOutletContext]=\"{column: column}\"></span>\n            <span class=\"column-sort-icon\" *ngIf=\"column.sortable\">\n              <i [hide]=\"column.property === sortBy\" class=\"fa fa-sort column-sortable-icon\"\n                aria-hidden=\"true\"></i>\n              <i [hide]=\"column.property !== sortBy\" class=\"fa\"\n                [ngClass]=\"{'fa-sort-asc': sortAsc, 'fa-sort-desc': !sortAsc}\" aria-hidden=\"true\"></i>\n            </span>\n            <span *ngIf=\"column.resizable\" class=\"column-resize-handle\"\n                  (mousedown)=\"resizeColumnStart($event, column, th)\"></span>\n          </button>\n          <span *ngIf=\"!column.sortable\">\n            <span *ngIf=\"!column.headerTemplate\"\n                  [textContent]=\"column.header\"></span>\n            <span *ngIf=\"column.headerTemplate\" [ngTemplateOutlet]=\"column.headerTemplate\"\n                  [ngTemplateOutletContext]=\"{column: column}\"></span>\n            <span class=\"column-sort-icon\" *ngIf=\"column.sortable\">\n               <i [hide]=\"column.property === sortBy\" class=\"fa fa-sort column-sortable-icon\"\n                  aria-hidden=\"true\"></i>\n               <i [hide]=\"column.property !== sortBy\" class=\"fa\"\n                  [ngClass]=\"{'fa-sort-asc': sortAsc, 'fa-sort-desc': !sortAsc}\" aria-hidden=\"true\"></i>\n            </span>\n            <span *ngIf=\"column.resizable\" class=\"column-resize-handle\"\n                  (mousedown)=\"resizeColumnStart($event, column, th)\"></span>\n          </span>\n        </th>\n      </tr>\n      </thead>\n      <tbody *ngFor=\"let item of items; let index=index\" class=\"data-table-row-wrapper\"\n             dataTableRow #row [item]=\"item\" [index]=\"index\" (selectedChange)=\"onRowSelectChanged(row)\">\n      </tbody>\n      <tbody *ngIf=\"itemCount === 0 && noDataMessage\">\n        <tr>\n          <td [attr.colspan]=\"columnCount\">{{ noDataMessage }}</td>\n        </tr>\n      </tbody>\n      <tbody class=\"substitute-rows\" *ngIf=\"pagination && substituteRows\">\n      <tr *ngFor=\"let item of substituteItems, let index = index\"\n          [class.row-odd]=\"(index + items.length) % 2 === 0\"\n          [class.row-even]=\"(index + items.length) % 2 === 1\" role=\"presentation\">\n        <td [hide]=\"!expandColumnVisible\"></td>\n        <td [hide]=\"!indexColumnVisible\">&nbsp;</td>\n        <td [hide]=\"!selectColumnVisible\"></td>\n        <td *ngFor=\"let column of columns\" [hide]=\"!column.visible\">\n      </tr>\n      </tbody>\n    </table>\n    <div class=\"busy\" *ngIf=\"showReloading && reloading\">\n      <i><i class=\"fa fa-spin fa-cog fa-2x\"></i></i>\n    </div>\n  </div>\n\n  <data-table-pagination *ngIf=\"pagination\" [limits]=\"pageLimits\"></data-table-pagination>\n</div>\n",
                styles: [":host /deep/ .data-table.table>tbody+tbody{border-top:none}:host /deep/ .data-table.table td{vertical-align:middle}:host /deep/ .data-table>tbody>tr>td,:host /deep/ .data-table>thead>tr>th{overflow:hidden}:host /deep/ .data-table>thead>tr>td{border-bottom:2px solid #dee2e6}:host /deep/ .row-odd{background-color:#f6f6f6}.data-table .substitute-rows>tr:hover,:host /deep/ .data-table .data-table-row:hover{background-color:#ececec}.data-table{-webkit-box-shadow:0 0 15px #ececec;box-shadow:0 0 15px #ececec;table-layout:fixed}.column-header{position:relative}.expand-column-header{width:50px}.select-column-header{width:50px;text-align:center}.index-column-header{width:40px}.column-header.sortable button{-webkit-box-sizing:content-box;box-sizing:content-box;background:0 0;border:0;color:inherit;cursor:pointer;font:inherit;line-height:normal;overflow:visible;padding:0;-webkit-appearance:button;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;text-align:left}.column-header .column-sort-icon{margin-left:8px}.column-header.resizable .column-sort-icon{margin-right:8px}.column-header .column-sort-icon .column-sortable-icon{color:#d3d3d3}.column-header .column-resize-handle{position:absolute;top:0;right:0;margin:0;padding:0;width:8px;height:100%;cursor:col-resize}.data-table-box{position:relative}.busy{position:absolute;z-index:1;top:0;bottom:0;left:0;right:0;background-color:rgba(0,0,0,.25)}.busy>i{position:absolute;left:50%;top:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}"]
            },] },
];
DataTableComponent.ctorParameters = function () { return []; };
DataTableComponent.propDecorators = {
    items: [{ type: Input }],
    itemCount: [{ type: Input }],
    columns: [{ type: ContentChildren, args: [DataTableColumnDirective,] }],
    rows: [{ type: ViewChildren, args: [DataTableRowComponent,] }],
    expandTemplate: [{ type: ContentChild, args: ['dataTableExpand',] }],
    title: [{ type: Input }],
    showTitle: [{ type: Input }],
    header: [{ type: Input }],
    pagination: [{ type: Input }],
    indexColumn: [{ type: Input }],
    indexColumnHeader: [{ type: Input }],
    rowColors: [{ type: Input }],
    rowTooltip: [{ type: Input }],
    filterableFields: [{ type: Input }],
    filters: [{ type: Input }],
    selectColumn: [{ type: Input }],
    multiSelect: [{ type: Input }],
    substituteRows: [{ type: Input }],
    expandableRows: [{ type: Input }],
    labels: [{ type: Input }],
    selectOnRowClick: [{ type: Input }],
    autoReload: [{ type: Input }],
    showReloading: [{ type: Input }],
    noDataMessage: [{ type: Input }],
    pageLimits: [{ type: Input }],
    primaryColumn: [{ type: Input }],
    tableCssClass: [{ type: Input }],
    tableContainerCssClass: [{ type: Input }],
    reload: [{ type: Output }],
    rowClick: [{ type: Output }],
    rowDoubleClick: [{ type: Output }],
    headerClick: [{ type: Output }],
    cellClick: [{ type: Output }],
    refreshClick: [{ type: Output }],
    filterAdded: [{ type: Output, args: ['filterAdded',] }],
    filterRemoved: [{ type: Output, args: ['filterRemoved',] }],
    filterUpdated: [{ type: Output, args: ['filterUpdated',] }],
    filterChanged: [{ type: Output, args: ['filterChanged',] }],
    sortBy: [{ type: Input }],
    sortAsc: [{ type: Input }],
    offset: [{ type: Input }],
    limit: [{ type: Input }],
    page: [{ type: Input }]
};
var DataTableHeaderComponent = /** @class */ (function () {
    function DataTableHeaderComponent(dataTable, elemRef) {
        this.dataTable = dataTable;
        this.elemRef = elemRef;
        this.columnSelectorOpen = false;
    }
    DataTableHeaderComponent.prototype.onClickHandler = function (event) {
        if (!this.elemRef.nativeElement.contains(event.target)) {
            this.columnSelectorOpen = false;
        }
    };
    DataTableHeaderComponent.prototype.onKeyUpHandler = function (event) {
        if (event.keyCode === 27 || (event.keyCode === 9 && !this.elemRef.nativeElement.contains(event.target))) {
            this.columnSelectorOpen = false;
        }
    };
    DataTableHeaderComponent.prototype.onChange = function (event) {
        var isChecked = (((event.target))).checked;
        var columnName = (((event.target))).parentElement.textContent.trim();
        var interpolateParams = {
            'column_name': columnName,
            'title': this.dataTable.title
        };
        this.dataTable.columnSelectorNotification = (isChecked ? this.dataTable.labels.headerColumnSelectorAdded :
            this.dataTable.labels.headerColumnSelectorRemoved)
            .replace('{column_name}', interpolateParams.column_name)
            .replace('{title}', interpolateParams.title);
    };
    return DataTableHeaderComponent;
}());
DataTableHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'data-table-header',
                template: "<div class=\"data-table-header\">\n  <p class=\"h4 title\" *ngIf=\"dataTable.showTitle\" [textContent]=\"dataTable.title\"></p>\n  <div class=\"button-panel\">\n    <button type=\"button\" class=\"btn btn-default btn-sm refresh-button\"\n            (click)=\"dataTable.refreshClick.emit()\"\n            [title]=\"dataTable.labels.headerReload.replace('{title}', dataTable.title)\">\n      <i class=\"fa fa-refresh\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"btn btn-default btn-sm column-selector-button\" [class.active]=\"columnSelectorOpen\"\n            [attr.aria-haspopup]=\"true\"\n            [attr.aria-expanded]=\"columnSelectorOpen\"\n            (click)=\"columnSelectorOpen = !columnSelectorOpen;\"\n            [title]=\"dataTable.labels.headerColumnSelector.replace('{title}', dataTable.title)\">\n      <i class=\"fa fa-list\" aria-hidden=\"true\"></i>\n    </button>\n    <div class=\"column-selector-wrapper\">\n      <div *ngIf=\"columnSelectorOpen\" class=\"column-selector-box panel panel-default\">\n        <ul class=\"list-group list-group-flush\">\n          <li *ngIf=\"dataTable.expandableRows\" class=\"list-group-item column-selector-column checkbox\">\n            <label class=\"d-flex align-items-center\">\n              <input type=\"checkbox\" [(ngModel)]=\"dataTable.expandColumnVisible\" (change)=\"onChange($event)\" [attr.aria-controls]=\"dataTable.id\"/>\n              <span [textContent]=\"dataTable.labels.expandColumn\"></span>\n            </label>\n          </li>\n          <li *ngIf=\"dataTable.indexColumn\" class=\"list-group-item column-selector-column checkbox\">\n            <label class=\"d-flex align-items-center\">\n              <input type=\"checkbox\" [(ngModel)]=\"dataTable.indexColumnVisible\" (change)=\"onChange($event)\" [attr.aria-controls]=\"dataTable.id\"/>\n              <span [textContent]=\"dataTable.labels.indexColumn\"></span>\n            </label>\n          </li>\n          <li *ngIf=\"dataTable.selectColumn\" class=\"list-group-item column-selector-column checkbox\">\n            <label class=\"d-flex align-items-center\">\n              <input type=\"checkbox\" [(ngModel)]=\"dataTable.selectColumnVisible\" (change)=\"onChange($event)\" [attr.aria-controls]=\"dataTable.id\"/>\n              <span [textContent]=\"dataTable.labels.selectColumn\"></span>\n            </label>\n          </li>\n          <ng-template ngFor let-item let-i=\"index\" [ngForOf]=\"dataTable.columns\">\n            <li class=\"list-group-item column-selector-column checkbox\"\n                *ngIf=\"dataTable.primaryColumn !== item.property\">\n              <label class=\"d-flex align-items-center\">\n                <input type=\"checkbox\" [(ngModel)]=\"item.visible\" (change)=\"onChange($event)\" [attr.aria-controls]=\"dataTable.id\"/>\n                <span [textContent]=\"item.header\"></span>\n              </label>\n            </li>\n          </ng-template>\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n",
                styles: [".data-table-header{min-height:25px;margin-bottom:10px}.title{display:inline-block;margin:5px 0 0 5px}.button-panel{float:right}.button-panel button{outline:0!important}.column-selector-wrapper{position:relative}.column-selector-box{-webkit-box-shadow:0 0 10px #d3d3d3;box-shadow:0 0 10px #d3d3d3;background:#fff;width:150px;padding:10px;position:absolute;right:0;top:1px;z-index:1060}.column-selector-box .list-group-item.column-selector-column{padding:.5rem .25rem}.column-selector-box .list-group-item.column-selector-column label{margin-bottom:0}.column-selector-box .list-group-item.column-selector-column input{margin-right:4px;font-style:italic}"]
            },] },
];
DataTableHeaderComponent.ctorParameters = function () { return [
    { type: DataTableComponent, decorators: [{ type: Inject, args: [forwardRef((function () { return DataTableComponent; })),] }] },
    { type: ElementRef }
]; };
DataTableHeaderComponent.propDecorators = {
    onClickHandler: [{ type: HostListener, args: ['document:click', ['$event'],] }],
    onKeyUpHandler: [{ type: HostListener, args: ['document:keyup', ['$event'],] }]
};
var nextId$1 = 0;
var DataTablePaginationComponent = /** @class */ (function () {
    function DataTablePaginationComponent(dataTable) {
        this.dataTable = dataTable;
        this.id = "pagination-" + nextId$1++;
        this.Math = Math;
    }
    DataTablePaginationComponent.prototype.pageBack = function () {
        this.dataTable.offset -= Math.min(this.dataTable.limit, this.dataTable.offset);
        if (this.dataTable.offset <= 0) {
            this.pageInput.nativeElement.focus();
        }
    };
    DataTablePaginationComponent.prototype.pageForward = function () {
        this.dataTable.offset += this.dataTable.limit;
        if ((this.dataTable.offset + this.dataTable.limit) >= this.dataTable.itemCount) {
            this.pageInput.nativeElement.focus();
        }
    };
    DataTablePaginationComponent.prototype.pageFirst = function () {
        this.dataTable.offset = 0;
        this.pageInput.nativeElement.focus();
    };
    DataTablePaginationComponent.prototype.pageLast = function () {
        this.dataTable.offset = (this.maxPage - 1) * this.dataTable.limit;
        if ((this.dataTable.offset + this.dataTable.limit) >= this.dataTable.itemCount) {
            this.pageInput.nativeElement.focus();
        }
    };
    Object.defineProperty(DataTablePaginationComponent.prototype, "maxPage", {
        get: function () {
            return Math.ceil(this.dataTable.itemCount / this.dataTable.limit);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTablePaginationComponent.prototype, "limit", {
        get: function () {
            return this.dataTable.limit;
        },
        set: function (value) {
            this.dataTable.limit = +value;
            this.page = 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTablePaginationComponent.prototype, "page", {
        get: function () {
            return this.dataTable.page;
        },
        set: function (value) {
            this.dataTable.page = +value;
        },
        enumerable: true,
        configurable: true
    });
    DataTablePaginationComponent.prototype.validate = function (event) {
        var newValue = +event.target.value;
        if (newValue !== this.page) {
            this.page = (event.target.value > this.maxPage) ? this.maxPage : (newValue < 1) ? 1 : newValue;
            event.target.value = this.page;
        }
    };
    return DataTablePaginationComponent;
}());
DataTablePaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'data-table-pagination',
                template: "<div class=\"d-flex justify-content-between align-items-center\">\n  <div class=\"pagination-range\">\n    <span [textContent]=\"dataTable.labels.paginationText\n        .replace('{from}', this.Math.ceil(dataTable.itemCount / dataTable.limit) !== 0 ? dataTable.offset + 1 + '' : '0')\n        .replace('{to}', this.Math.min(dataTable.offset + dataTable.limit, dataTable.itemCount) + '')\n        .replace('{total}', dataTable.itemCount + '')\"></span>\n  </div>\n  <div class=\"pagination-controllers pagination-box d-flex justify-content-between\">\n    <div class=\"pagination-limit d-flex justify-content-between\">\n      <div class=\"input-group\">\n        <div class=\"input-group-prepend\">\n          <label [attr.for]=\"id + '-page-limit'\" class=\"input-group-text\" [textContent]=\"dataTable.labels.paginationLimit\"></label>\n        </div>\n        <select [id]=\"id + '-page-limit'\" class=\"form-control\" [(ngModel)]=\"limit\" [disabled]=\"dataTable.itemCount === 0\">\n          <option *ngFor=\"let l of limits\" [value]=\"l\">{{ l }}</option>\n        </select>\n      </div>\n    </div>\n    <div class=\"pagination-pages d-flex justify-content-between\">\n      <button [disabled]=\"dataTable.offset <= 0\"\n              (click)=\"pageFirst()\"\n              class=\"btn btn-default pagination-firstpage\"\n              [title]=\"dataTable.labels.firstPage\"\n              [attr.aria-controls]=\"dataTable.id\">\n        <i class=\"fa fa-angle-double-left\" aria-hidden=\"true\"></i>\n      </button>\n      <button [disabled]=\"dataTable.offset <= 0\"\n              (click)=\"pageBack()\"\n              class=\"btn btn-default pagination-prevpage\"\n              [title]=\"dataTable.labels.prevPage\"\n              [attr.aria-controls]=\"dataTable.id\">\n        <i class=\"fa fa-angle-left\" aria-hidden=\"true\"></i>\n      </button>\n      <div class=\"pagination-page\">\n        <div class=\"input-group\">\n          <div class=\"input-group-prepend\">\n            <label class=\"input-group-text\" [attr.for]=\"id + '-page-input'\">\n              {{ dataTable.labels.pageNumberLabel }}\n            </label>\n          </div>\n          <input #pageInput type=\"number\"\n                 [id]=\"id + '-page-input'\"\n                 class=\"form-control\" min=\"1\" step=\"1\" max=\"{{maxPage}}\"\n                 [disabled]=\"dataTable.itemCount === 0\"\n                 [ngModel]=\"page\"\n                 (blur)=\"validate($event)\"\n                 (keyup.enter)=\"validate($event)\"\n                 (keyup.esc)=\"pageInput.value = page\"\n                 [title]=\"dataTable.labels.pageNumber + ' ' +\n                    dataTable.labels.pageNumberNofM.replace('{N}', ''+page).replace('{M}', ''+maxPage)\"\n                 [attr.aria-controls]=\"dataTable.id\"/>\n          <div class=\"input-group-append\">\n            <span class=\"input-group-text\">\n              {{ dataTable.labels.paginationTotalPages }}&nbsp;{{ dataTable.lastPage }}\n            </span>\n          </div>\n        </div>\n      </div>\n      <button [disabled]=\"(dataTable.offset + dataTable.limit) >= dataTable.itemCount\"\n              (click)=\"pageForward()\"\n              class=\"btn btn-default pagination-nextpage\"\n              [title]=\"dataTable.labels.nextPage\"\n              [attr.aria-controls]=\"dataTable.id\">\n        <i class=\"fa fa-angle-right\" aria-hidden=\"true\"></i>\n      </button>\n      <button [disabled]=\"(dataTable.offset + dataTable.limit) >= dataTable.itemCount\"\n              (click)=\"pageLast()\"\n              class=\"btn btn-default pagination-lastpage\"\n              [title]=\"dataTable.labels.lastPage\"\n              [attr.aria-controls]=\"dataTable.id\">\n        <i class=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i>\n      </button>\n    </div>\n  </div>\n</div>\n",
                styles: [".pagination-controllers select{min-width:5rem;text-align:right}.pagination-pages>*{margin:0 .15rem}.pagination-limit{margin-right:1.5rem}.pagination-box button{outline:0!important}"]
            },] },
];
DataTablePaginationComponent.ctorParameters = function () { return [
    { type: DataTableComponent, decorators: [{ type: Inject, args: [forwardRef((function () { return DataTableComponent; })),] }] }
]; };
DataTablePaginationComponent.propDecorators = {
    pageInput: [{ type: ViewChild, args: ['pageInput',] }],
    limits: [{ type: Input }]
};
var FieldFilterChooserPopupDialog = /** @class */ (function () {
    function FieldFilterChooserPopupDialog(_dialogCloser, data) {
        this._dialogCloser = _dialogCloser;
        this.data = data;
        this.fieldSearchQuery = '';
        this.filteredFields = data.fields;
    }
    FieldFilterChooserPopupDialog.prototype.ngOnInit = function () {
    };
    FieldFilterChooserPopupDialog.prototype.ngAfterViewInit = function () {
        this.keyboardEventsManager = new ListKeyManager(this.listItem);
    };
    FieldFilterChooserPopupDialog.prototype.onFieldSearch = function (searchQuery) {
        this.filteredFields = this.data.fields.filter((function (c) { return c.header.toLowerCase().indexOf(searchQuery.toLowerCase()) != -1; }));
    };
    FieldFilterChooserPopupDialog.prototype.fieldSelected = function (field) {
        this._dialogCloser(field);
    };
    FieldFilterChooserPopupDialog.prototype.handleKeyDown = function (event) {
        event.stopImmediatePropagation();
        if (this.keyboardEventsManager) {
            if (event.keyCode === DOWN_ARROW || event.keyCode === UP_ARROW) {
                this.keyboardEventsManager.onKeydown(event);
                var activeItem = ((this.keyboardEventsManager.activeItem));
                if (activeItem == this.activeItem) {
                    event.keyCode === DOWN_ARROW ? this.keyboardEventsManager.setFirstItemActive() : this.keyboardEventsManager.setLastItemActive();
                    activeItem = ((this.keyboardEventsManager.activeItem));
                }
                this.activeItem = activeItem;
                (((this.keyboardEventsManager.activeItem)))._getHostElement().scrollIntoView();
                return false;
            }
            else if (event.keyCode === ENTER) {
                (((this.keyboardEventsManager.activeItem)))._getHostElement().click();
                return false;
            }
        }
    };
    return FieldFilterChooserPopupDialog;
}());
FieldFilterChooserPopupDialog.decorators = [
    { type: Component, args: [{
                selector: 'app-field-filter-chooser-popup-dialog',
                template: "<div class=\"dialog-container\">\n  <form class=\"search-field\">\n    <mat-form-field>\n      <input autocomplete=\"off\" matInput [placeholder]=\"data.labels.searchField\" name=\"fieldSearchQuery\" [ngModel]=\"fieldSearchQuery\"\n        (ngModelChange)=\"onFieldSearch($event)\" (keydown)=\"handleKeyDown($event)\">\n    </mat-form-field>\n  </form>\n  <div class=\"fields-list\">\n    <mat-nav-list>\n      <a tabindex=\"0\" mat-list-item [class.active]=\"activeItem == listItem\" #listItem *ngFor=\"let field of filteredFields\"\n        (click)=\"fieldSelected(field)\">{{field.header}}\n      </a>\n    </mat-nav-list>\n  </div>\n</div>\n",
                styles: [".dialog-container{padding-bottom:12px}.search-field{padding:12px 12px 0}.fields-list{max-height:250px;overflow-y:auto}::-webkit-scrollbar{width:6px;background-color:#f5f5f5}::-webkit-scrollbar-thumb{border-radius:10px;-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#d9d9d9}.mat-list-item.active{background:rgba(0,0,0,.04)}"]
            },] },
];
FieldFilterChooserPopupDialog.ctorParameters = function () { return [
    { type: Function, decorators: [{ type: Inject, args: [POPUP_DIALOG_CLOSE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
]; };
FieldFilterChooserPopupDialog.propDecorators = {
    listItem: [{ type: ViewChildren, args: ['listItem',] }]
};
var MyErrorStateMatcher = /** @class */ (function () {
    function MyErrorStateMatcher() {
    }
    MyErrorStateMatcher.prototype.isErrorState = function (control, form) {
        var isSubmitted = form && form.submitted;
        return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));
    };
    return MyErrorStateMatcher;
}());
var FieldFilterPopupDialog = /** @class */ (function () {
    function FieldFilterPopupDialog(_dialogCloser, data) {
        this._dialogCloser = _dialogCloser;
        this.data = data;
        this.MUST_SELECT_VALUE_VALIDATION = this.data.labels.selectedValueRequired;
        this.valuesList = [];
        this.isAtleastOneValueSelected = true;
        this.matcher = new MyErrorStateMatcher();
        this.dataType = this.data.fieldFilter.field.dataType;
        this.filterOperators = FieldFilterPopupDialog.ALL_FILTER_OPERATORS[this.dataType];
        if (!this.filterOperators)
            throw "Data type '" + this.dataType + "' for field '" + this.data.fieldFilter.field.header + "' is not recognized";
        this.selectedOperator = this.data.fieldFilter.operator || this.filterOperators[0];
        this.filterValue = this.dataType == 'date' ? this.toDate(this.data.fieldFilter.value) : this.data.fieldFilter.value;
        if (this.dataType == 'enum') {
            if (this.data.fieldFilter.value)
                this.valuesList = this.valuesList.concat(this.data.fieldFilter.value).filter((function (v) { return v != null; }));
            this.isAtleastOneValueSelected = this.valuesList.length != 0;
        }
        if (this.dataType == 'bool' && this.filterValue == null) {
            this.filterValue = true;
        }
    }
    FieldFilterPopupDialog.prototype.ngOnInit = function () {
    };
    FieldFilterPopupDialog.prototype.onFilterApply = function () {
        var value = this.filterValue;
        if (this.selectedOperator === 'empty') {
            value = null;
        }
        else {
            if (this.dataType == 'date')
                value = this.formatDate(value);
            if (this.dataType == 'enum')
                value = this.valuesList;
        }
        this._dialogCloser({ field: this.data.fieldFilter.field, operator: this.selectedOperator, value: value });
    };
    FieldFilterPopupDialog.prototype.valueCheckChange = function (value, checked) {
        if (checked) {
            this.valuesList.push(value);
        }
        else {
            var index = this.valuesList.indexOf(value);
            if (index != -1)
                this.valuesList.splice(index, 1);
        }
        this.isAtleastOneValueSelected = this.valuesList.length != 0;
    };
    FieldFilterPopupDialog.prototype.isValueChecked = function (value) {
        return this.valuesList.indexOf(value) != -1;
    };
    FieldFilterPopupDialog.prototype.getErrorMessage = function (field) {
        if (field.hasError('matDatepickerParse'))
            return this.data.labels.validDateRequired;
        else if (field.hasError('required'))
            return this.data.labels.valueRequired;
        else if (field.hasError('pattern'))
            return this.data.labels.numericValueRequired;
        else
            return '';
    };
    FieldFilterPopupDialog.prototype.getPossibleOptionValue = function (option) {
        return typeof option === 'string' ? option : option.value;
    };
    FieldFilterPopupDialog.prototype.getPossibleOptionDisplayText = function (option) {
        return typeof option === 'string' ? option : option.displayText;
    };
    FieldFilterPopupDialog.prototype.formatDate = function (d) {
        return [d.getDate(), d.getMonth() + 1, d.getFullYear()].join('/');
    };
    FieldFilterPopupDialog.prototype.toDate = function (s) {
        if (!s)
            return new Date();
        var split = s.split('/');
        return new Date(Number(split[2]), Number(split[1]) - 1, Number(split[0]));
    };
    return FieldFilterPopupDialog;
}());
FieldFilterPopupDialog.numericOperators = ['lt', 'gt', 'lte', 'gte', 'eq', 'ne', 'empty'];
FieldFilterPopupDialog.textualOperators = ['contains', 'not_contains', 'starts', 'ends', 'eq', 'ne', 'empty'];
FieldFilterPopupDialog.enumOperators = ['eq', 'ne', 'empty'];
FieldFilterPopupDialog.boolOperators = ['eq'];
FieldFilterPopupDialog.ALL_FILTER_OPERATORS = {
    "number": FieldFilterPopupDialog.numericOperators,
    "date": FieldFilterPopupDialog.numericOperators,
    "text": FieldFilterPopupDialog.textualOperators,
    "enum": FieldFilterPopupDialog.enumOperators,
    "bool": FieldFilterPopupDialog.boolOperators
};
FieldFilterPopupDialog.decorators = [
    { type: Component, args: [{
                selector: 'app-field-filter-popup-dialog',
                template: "<div>\n  <form #f=\"ngForm\" (ngSubmit)=\"((f.valid && isAtleastOneValueSelected) || selectedOperator == 'empty') && onFilterApply()\">\n    <div class=\"header\">\n      <span class=\"field-label\">{{data.fieldFilter.field.header}}</span>\n      <button mat-dialog-close class=\"icon-button\" mat-icon-button>\n        <mat-icon aria-label=\"close\">close</mat-icon>\n      </button>\n    </div>\n    <div class=\"content\">\n      <div class=\"filter-operator\">\n        <div class=\"mat-auto-width\">\n          <mat-form-field>\n            <mat-select [(value)]=\"selectedOperator\">\n              <mat-option *ngFor=\"let operator of filterOperators\" [value]=\"operator\">\n                {{data.labels.filterOperators[operator]}}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n      </div>\n      <div class=\"ml-2 mat-auto-width\">\n        <ng-container *ngIf=\"dataType == 'number' && selectedOperator !== 'empty'\">\n          <ng-container *ngTemplateOutlet=\"numericField\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"dataType == 'date' && selectedOperator !== 'empty'\">\n          <ng-container *ngTemplateOutlet=\"dateField\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"dataType == 'text' && selectedOperator !== 'empty'\">\n          <ng-container *ngTemplateOutlet=\"textField\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"dataType == 'enum' && selectedOperator !== 'empty'\">\n          <ng-container *ngTemplateOutlet=\"valuesListField; context: {options: data.fieldFilter.field.possibleOptions, form: f}\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"dataType == 'bool' && selectedOperator !== 'empty'\">\n          <ng-container *ngTemplateOutlet=\"booleanField\"></ng-container>\n        </ng-container>\n      </div>\n    </div>\n    <div class=\"footer\">\n      <button type=\"submit\" class=\"mx-1\" mat-button>{{data.labels.apply}}</button>\n    </div>\n\n\n    <ng-template #dateField>\n      <mat-form-field hideRequiredMarker=\"true\" floatLabel=\"never\">\n        <input cdkFocusInitial autocomplete=\"off\" matInput [errorStateMatcher]=\"matcher\" #filterValueInput=\"ngModel\" name=\"filterValue\"\n          [(ngModel)]=\"filterValue\" [matDatepicker]=\"picker\" [placeholder]=\"data.labels.date\" class=\"ltr\" required>\n        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n        <mat-datepicker #picker panelClass=\"field-filter-popup-value-panel\"></mat-datepicker>\n        <mat-error *ngIf=\"filterValueInput && filterValueInput.invalid\">{{getErrorMessage(filterValueInput)}}</mat-error>\n      </mat-form-field>\n    </ng-template>\n\n    <ng-template #numericField>\n      <mat-form-field hideRequiredMarker=\"true\" floatLabel=\"never\">\n        <input cdkFocusInitial autocomplete=\"off\" matInput [placeholder]=\"data.labels.value\" [errorStateMatcher]=\"matcher\"\n          #filterValueInput=\"ngModel\" name=\"filterValue\" [(ngModel)]=\"filterValue\" required pattern=\"^[0-9]+(.?[0-9]+)?$\">\n        <mat-error *ngIf=\"filterValueInput && filterValueInput.invalid\">{{getErrorMessage(filterValueInput)}}</mat-error>\n      </mat-form-field>\n    </ng-template>\n\n    <ng-template #valuesListField let-options=\"options\" let-operator=\"operator\" let-f=\"form\">\n      <div class=\"py-3\">\n        <mat-checkbox class=\"d-block\" *ngFor=\"let option of options\" [checked]=\"isValueChecked(option)\" (change)=\"valueCheckChange(option, $event.checked)\">{{getPossibleOptionDisplayText(option)}}</mat-checkbox>\n        <mat-error *ngIf=\"f.submitted && !isAtleastOneValueSelected\">{{MUST_SELECT_VALUE_VALIDATION}}</mat-error>\n      </div>\n    </ng-template>\n\n    <ng-template #booleanField>\n      <div class=\"py-3\">\n        <!-- Workaround to focus radio buttons -->\n        <input style=\"width: 0px; height: 0px;\" cdkFocusInitial (focus)=\"filterValue == false ? radioButtonFalse.focus() : radioButtonTrue.focus()\" autocomplete=\"off\" matInput>\n        <mat-radio-group [(ngModel)]=\"filterValue\" name=\"filterValue\">\n          <mat-radio-button #radioButtonTrue class=\"mr-3\" [value]=\"true\"><mat-icon class=\"mt-1\">check</mat-icon></mat-radio-button>\n          <mat-radio-button #radioButtonFalse [value]=\"false\"><mat-icon class=\"mt-1\">close</mat-icon></mat-radio-button>\n        </mat-radio-group>\n      </div>\n    </ng-template>\n\n    <ng-template #textField>\n      <mat-form-field hideRequiredMarker=\"true\" floatLabel=\"never\">\n        <input cdkFocusInitial autocomplete=\"off\" matInput [placeholder]=\"data.labels.value\" [errorStateMatcher]=\"matcher\"\n          #filterValueInput=\"ngModel\" name=\"filterValue\" [(ngModel)]=\"filterValue\" required>\n        <mat-error *ngIf=\"filterValueInput && filterValueInput.invalid\">{{getErrorMessage(filterValueInput)}}</mat-error>\n      </mat-form-field>\n    </ng-template>\n\n  </form>\n</div>\n",
                styles: [".header{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;background:#3367d6;border-radius:2px 2px 0 0;color:#fff;font-size:15px;min-width:176px;padding:8px}.field-label{padding:0 8px}.icon-button{outline:0}.content{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;display:-webkit-box;display:-ms-flexbox;display:flex;overflow:hidden;padding:24px;min-width:200px;max-height:200px;overflow-y:auto}.footer{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;color:#4285f4;padding:8px 0}::ng-deep .mat-select-value{min-width:24px!important}.mat-auto-width ::ng-deep .mat-form-field{width:auto!important}.mat-auto-width ::ng-deep .mat-form-field-infix{width:auto!important}.mat-auto-width ::ng-deep .mat-select-value{max-width:100%;width:auto}::ng-deep .mat-checkbox:not(.mat-checkbox-disabled).mat-accent .mat-checkbox-ripple .mat-ripple-element{background-color:#4285f4}.mat-checkbox-indeterminate.mat-accent .mat-checkbox-background,::ng-deep .mat-checkbox-checked.mat-accent .mat-checkbox-background{background-color:#4285f4}::ng-deep .mat-radio-button.mat-accent .mat-radio-inner-circle{background-color:#4285f4}::ng-deep .mat-radio-button.mat-accent.mat-radio-checked .mat-radio-outer-circle{border-color:#4285f4}::ng-deep .mat-radio-button.mat-accent .mat-radio-ripple .mat-ripple-element{background-color:rgba(66,133,244,.26)!important}::-webkit-scrollbar{width:6px;background-color:#f5f5f5}::-webkit-scrollbar-thumb{border-radius:10px;-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#d9d9d9}.ltr{direction:ltr}"]
            },] },
];
FieldFilterPopupDialog.ctorParameters = function () { return [
    { type: Function, decorators: [{ type: Inject, args: [POPUP_DIALOG_CLOSE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
]; };
var FilterBarComponent = /** @class */ (function () {
    function FilterBarComponent(dataTable, popupDialogService) {
        this.dataTable = dataTable;
        this.popupDialogService = popupDialogService;
        this.filters = [];
        this.fields = this.dataTable.filterableFields;
        if (dataTable.filters) {
            this.filters = dataTable.filters;
        }
    }
    FilterBarComponent.prototype.ngOnInit = function () {
    };
    FilterBarComponent.prototype.inputFocused = function (event) {
        (((event.currentTarget))).blur();
        this.openFieldChooserDialog(event.currentTarget);
    };
    FilterBarComponent.prototype.chipClicked = function (event, filter) {
        var _this_1 = this;
        var dialogRef = this.openFieldFilterDialog(event.currentTarget, filter);
        dialogRef.afterClosed().subscribe((function (result) {
            if (!result)
                return;
            _this_1.dataTable.filterUpdated.emit({ old: _this_1.convertFilterToEmittedFilter(filter), new: _this_1.convertFilterToEmittedFilter(result) });
            var index = _this_1.filters.indexOf(filter);
            _this_1.filters[index] = result;
            _this_1.dataTable.filterChanged.emit(_this_1.filters.map((function (c) { return _this_1.convertFilterToEmittedFilter(c); })));
            filter = result;
        }));
    };
    FilterBarComponent.prototype.openFieldChooserDialog = function (triggeredElement) {
        var _this_1 = this;
        if (this.fieldChooserDialogRef)
            return;
        this.fieldChooserDialogRef = this.popupDialogService.open(FieldFilterChooserPopupDialog, triggeredElement, {
            coverTriggeringElement: true,
            data: {
                fields: this.fields,
                labels: this.dataTable.labels
            }
        });
        this.fieldChooserDialogRef.afterClosed().subscribe((function (field) {
            _this_1.fieldChooserDialogRef = null;
            if (!field)
                return;
            var dialogRef = _this_1.openFieldFilterDialog(triggeredElement, { field: field });
            dialogRef.afterClosed().subscribe((function (filter) {
                if (!filter)
                    return;
                _this_1.filters.push(filter);
                _this_1.dataTable.filterAdded.emit(_this_1.convertFilterToEmittedFilter(filter));
                _this_1.dataTable.filterChanged.emit(_this_1.filters.map((function (c) { return _this_1.convertFilterToEmittedFilter(c); })));
            }));
        }));
    };
    FilterBarComponent.prototype.openFieldFilterDialog = function (triggeredElement, filter) {
        var dialogRef = this.popupDialogService.open(FieldFilterPopupDialog, triggeredElement, {
            suppressCloseOnClickSelectors: ['.cdk-overlay-container'],
            coverTriggeringElement: true,
            data: {
                fieldFilter: filter,
                labels: this.dataTable.labels
            }
        });
        return dialogRef;
    };
    FilterBarComponent.prototype.removeFilter = function (filter) {
        var _this_1 = this;
        var index = this.filters.indexOf(filter);
        if (index >= 0) {
            this.filters.splice(index, 1);
            this.dataTable.filterRemoved.emit(this.convertFilterToEmittedFilter(filter));
            this.dataTable.filterChanged.emit(this.filters.map((function (c) { return _this_1.convertFilterToEmittedFilter(c); })));
        }
    };
    FilterBarComponent.prototype.formatValue = function (filter) {
        var value = filter.value;
        if (filter.operator == 'empty')
            return '';
        if (filter.field.dataType == "enum") {
            value = (((filter.value))).map((function (v) { return typeof v === "string" ? v : v.displayText; }));
        }
        if (Array.isArray(value)) {
            value = value.join(', ');
        }
        return value;
    };
    FilterBarComponent.prototype.formatChipDisplayText = function (filter) {
        if (filter.field.dataType == "bool") {
            return filter.value == false ? this.dataTable.labels.not + " " + filter.field.header : filter.field.header;
        }
        else {
            return filter.field.header + " " + this.dataTable.labels.filterOperators[filter.operator] + " " + this.formatValue(filter);
        }
    };
    FilterBarComponent.prototype.convertFilterToEmittedFilter = function (filter) {
        var clonedFilter = ((JSON.parse(JSON.stringify(filter))));
        if (clonedFilter.operator == "empty")
            return clonedFilter;
        if (clonedFilter.field.dataType == "enum") {
            var valuesList = clonedFilter.value;
            for (var i = 0; i < valuesList.length; i++) {
                var value = valuesList[i];
                valuesList[i] = typeof value === "string" ? value : value.value;
            }
        }
        return clonedFilter;
    };
    return FilterBarComponent;
}());
FilterBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-bar',
                template: "<div class=\"filter-bar\">\n    <div class=\"px-2 pb-2\">\n      <mat-chip-list #chipList>\n        <i class=\"fa fa-filter fa-2x filter-icon mr-1\" (click)=\"filterInput.click()\"></i>\n        <mat-chip *ngFor=\"let filter of filters\" (click)=\"chipClicked($event, filter)\" [removable]=\"true\" (removed)=\"removeFilter(filter)\">\n          {{formatChipDisplayText(filter)}}\n          <mat-icon matChipRemove>cancel</mat-icon>\n        </mat-chip>\n        <input #filterInput autocomplete=\"off\" class=\"filter-input\" [placeholder]=\"dataTable.labels.addFilter\" [matChipInputFor]=\"chipList\" (focus)=\"inputFocused($event)\">\n      </mat-chip-list>\n    </div>\n</div>\n",
                styles: [".filter-input{background-color:transparent;border:0;height:32px;outline:0;padding:0}.filter-icon{color:#3367d6;cursor:pointer}"]
            },] },
];
FilterBarComponent.ctorParameters = function () { return [
    { type: DataTableComponent, decorators: [{ type: Inject, args: [forwardRef((function () { return DataTableComponent; })),] }] },
    { type: PopupDialogService }
]; };
var DataTableModule = /** @class */ (function () {
    function DataTableModule() {
    }
    DataTableModule.forRoot = function () {
        return {
            ngModule: DataTableModule,
            providers: []
        };
    };
    return DataTableModule;
}());
DataTableModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    DataTableComponent, DataTableColumnDirective,
                    DataTableRowComponent, DataTablePaginationComponent, DataTableHeaderComponent,
                    PixelConverter, HideDirective, MinPipe, FilterBarComponent, FieldFilterChooserPopupDialog,
                    FieldFilterPopupDialog
                ],
                entryComponents: [
                    FieldFilterChooserPopupDialog,
                    FieldFilterPopupDialog
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    {
                        ngModule: NgxPopupDialogModule,
                        providers: [PopupDialogService]
                    },
                    MatFormFieldModule,
                    MatIconModule,
                    MatDialogModule,
                    MatChipsModule,
                    MatInputModule,
                    MatButtonModule,
                    MatListModule,
                    MatSelectModule,
                    MatCheckboxModule,
                    MatRadioModule,
                    MatDatepickerModule,
                    MatNativeDateModule
                ],
                exports: [DataTableComponent, DataTableColumnDirective]
            },] },
];

export { DataTableModule, DataTableComponent as DataTable, DataTableColumnDirective as DataTableColumn, DataTableRowComponent as DataTableRow, DataTablePaginationComponent as DataTablePagination, DataTableHeaderComponent as DataTableHeader, DataTableResource, FieldFilterChooserPopupDialog as ɵe, FieldFilterPopupDialog as ɵf, FilterBarComponent as ɵd, HideDirective as ɵb, MinPipe as ɵc, PixelConverter as ɵa };
//# sourceMappingURL=angular7-data-table.js.map
