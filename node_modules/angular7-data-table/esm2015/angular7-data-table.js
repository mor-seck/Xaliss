import { Directive, ElementRef, Input, Renderer2, Pipe, ContentChild, Component, EventEmitter, forwardRef, Inject, Output, ContentChildren, ViewChildren, HostListener, ViewChild, NgModule } from '@angular/core';
import { debounceTime } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';
import { POPUP_DIALOG_CLOSE, PopupDialogService, NgxPopupDialogModule } from 'ngx-popup-dialog';
import { ListKeyManager } from '@angular/cdk/a11y';
import { UP_ARROW, DOWN_ARROW, ENTER } from '@angular/cdk/keycodes';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatChipsModule } from '@angular/material/chips';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatSelectModule } from '@angular/material/select';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatRadioModule } from '@angular/material/radio';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} obj
 * @return {?}
 */
function isBlank(obj) {
    return obj === undefined || obj === null;
}
class HideDirective {
    /**
     * @param {?} _elementRef
     * @param {?} renderer
     */
    constructor(_elementRef, renderer) {
        this._elementRef = _elementRef;
        this.renderer = renderer;
        this._prevCondition = false;
    }
    /**
     * @param {?} newCondition
     * @return {?}
     */
    set hide(newCondition) {
        this.initDisplayStyle();
        if (newCondition && (isBlank(this._prevCondition) || !this._prevCondition)) {
            this._prevCondition = true;
            this.renderer.setStyle(this._elementRef.nativeElement, 'display', 'none');
        }
        else if (!newCondition && (isBlank(this._prevCondition) || this._prevCondition)) {
            this._prevCondition = false;
            this.renderer.setStyle(this._elementRef.nativeElement, 'display', this._displayStyle);
        }
    }
    /**
     * @private
     * @return {?}
     */
    initDisplayStyle() {
        if (this._displayStyle === undefined) {
            /** @type {?} */
            const displayStyle = this._elementRef.nativeElement.style.display;
            if (displayStyle !== 'none') {
                this._displayStyle = displayStyle;
            }
        }
    }
}
HideDirective.decorators = [
    { type: Directive, args: [{
                selector: '[hide]'
            },] },
];
/** @nocollapse */
HideDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
HideDirective.propDecorators = {
    hide: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MinPipe {
    /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    transform(value, args) {
        return Math.min.apply(null, value);
    }
}
MinPipe.decorators = [
    { type: Pipe, args: [{
                name: 'min'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PixelConverter {
    /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    transform(value, args) {
        if (value === undefined) {
            return;
        }
        if (typeof value === 'string') {
            return value;
        }
        if (typeof value === 'number') {
            return value + 'px';
        }
    }
}
PixelConverter.decorators = [
    { type: Pipe, args: [{
                name: 'px'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class DataTableResource {
    /**
     * @param {?} items
     */
    constructor(items) {
        this.items = items;
    }
    /**
     * @param {?} params
     * @param {?=} filter
     * @return {?}
     */
    query(params, filter) {
        /** @type {?} */
        let result = [];
        if (filter) {
            result = this.items.filter(filter);
        }
        else {
            result = this.items.slice(); // shallow copy to use for sorting instead of changing the original
        }
        if (params.sortBy) {
            result.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                if (typeof a[params.sortBy] === 'string') {
                    return a[params.sortBy].localeCompare(b[params.sortBy]);
                }
                else {
                    return a[params.sortBy] - b[params.sortBy];
                }
            }));
            if (params.sortAsc === false) {
                result.reverse();
            }
        }
        if (params.offset !== undefined) {
            if (params.limit === undefined) {
                result = result.slice(params.offset, result.length);
            }
            else {
                result = result.slice(params.offset, params.offset + params.limit);
            }
        }
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            setTimeout((/**
             * @return {?}
             */
            () => resolve(result)));
        }));
    }
    /**
     * @return {?}
     */
    count() {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            setTimeout((/**
             * @return {?}
             */
            () => resolve(this.items.length)));
        }));
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataTableColumnDirective {
    constructor() {
        this.styleClassObject = {}; // for [ngClass]
        this.sortable = false;
        this.resizable = false;
        this.visible = true;
    }
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    getCellColor(row, index) {
        if (this.cellColors !== undefined) {
            return ((/** @type {?} */ (this.cellColors)))(row.item, row, this, index);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._initCellClass();
    }
    /**
     * @private
     * @return {?}
     */
    _initCellClass() {
        if (!this.styleClass && this.property) {
            if (/^[a-zA-Z0-9_]+$/.test(this.property)) {
                this.styleClass = 'column-' + this.property;
            }
            else {
                this.styleClass = 'column-' + this.property.replace(/[^a-zA-Z0-9_]/g, '');
            }
        }
        if (this.styleClass != null) {
            this.styleClassObject = {
                [this.styleClass]: true
            };
        }
    }
}
DataTableColumnDirective.decorators = [
    { type: Directive, args: [{
                selector: 'data-table-column'
            },] },
];
DataTableColumnDirective.propDecorators = {
    header: [{ type: Input }],
    sortable: [{ type: Input }],
    resizable: [{ type: Input }],
    property: [{ type: Input }],
    styleClass: [{ type: Input }],
    cellColors: [{ type: Input }],
    width: [{ type: Input }],
    visible: [{ type: Input }],
    cellTemplate: [{ type: ContentChild, args: ['dataTableCell',] }],
    headerTemplate: [{ type: ContentChild, args: ['dataTableHeader',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataTableRowComponent {
    /**
     * @param {?} dataTable
     * @param {?} renderer
     * @param {?} elementRef
     */
    constructor(dataTable, renderer, elementRef) {
        this.dataTable = dataTable;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this._this = this;
        this._listeners = [];
        this.selectedChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * @param {?} selected
     * @return {?}
     */
    set selected(selected) {
        this._selected = selected;
        this.selectedChange.emit(selected);
    }
    // other:
    /**
     * @return {?}
     */
    get displayIndex() {
        if (this.dataTable.pagination) {
            return this.dataTable.displayParams.offset + this.index + 1;
        }
        else {
            return this.index + 1;
        }
    }
    /**
     * @return {?}
     */
    getTooltip() {
        if (this.dataTable.rowTooltip) {
            return this.dataTable.rowTooltip(this.item, this, this.index);
        }
        return '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.dataTable.rowClick.observers.length > 0) {
            this._listeners.push(this.renderer.listen(this.elementRef.nativeElement, 'click', (/**
             * @param {?} event
             * @return {?}
             */
            (event) => this.dataTable.rowClicked(this, event))));
        }
        if (this.dataTable.rowDoubleClick.observers.length > 0) {
            this._listeners.push(this.renderer.listen(this.elementRef.nativeElement, 'dblclick', (/**
             * @param {?} event
             * @return {?}
             */
            (event) => this.dataTable.rowDoubleClicked(this, event))));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.selected = false;
        this._listeners.forEach((/**
         * @param {?} fn
         * @return {?}
         */
        fn => fn()));
    }
}
DataTableRowComponent.decorators = [
    { type: Component, args: [{
                selector: '[dataTableRow]',
                template: `<tr class="data-table-row"
    [title]="getTooltip()"
    [style.background-color]="dataTable.getRowColor(item, index, _this)"
    [class.row-odd]="index % 2 === 0"
    [class.row-even]="index % 2 === 1"
    [class.selected]="selected"
    [class.clickable]="dataTable.selectOnRowClick">
  <td [hide]="!dataTable.expandColumnVisible">
    <button (click)="expanded = !expanded; $event.stopPropagation()" class="row-expand-button"
         [attr.aria-expanded]="expanded"
         [title]="dataTable.labels.expandRow.replace('{cell_content}', ''+item[dataTable.primaryColumn])"
         [attr.aria-label]="dataTable.labels.expandRow.replace('{cell_content}', ''+item[dataTable.primaryColumn])">
      <i [ngClass]="{'fa-caret-right': !expanded, 'fa-caret-down': expanded}" class="fa fa-lg" aria-hidden="true"></i>
    </button>
  </td>
  <td [hide]="!dataTable.indexColumnVisible" class="index-column" [textContent]="displayIndex"></td>
  <td [hide]="!dataTable.selectColumnVisible" class="select-column">
    <input type="checkbox" [(ngModel)]="selected"
           [title]="dataTable.labels.selectRow.replace('{cell_content}', ''+item[dataTable.primaryColumn])"
           [attr.aria-label]="dataTable.labels.selectRow.replace('{cell_content}', ''+item[dataTable.primaryColumn])"/>
  </td>
  <ng-template ngFor [ngForOf]="dataTable.columns" let-column>
    <th *ngIf="dataTable.primaryColumn === column.property" scope="row" [hide]="!column.visible" [ngClass]="column.styleClassObject"
        class="data-column" [attr.data-label]="column.header"
        [style.background-color]="column.getCellColor(_this, index)">
      <div *ngIf="!column.cellTemplate" [textContent]="item[column.property]"></div>
      <div *ngIf="column.cellTemplate" [ngTemplateOutlet]="column.cellTemplate"
           [ngTemplateOutletContext]="{column: column, row: _this, item: item}"></div>
    </th>
    <td *ngIf="dataTable.primaryColumn !== column.property" [hide]="!column.visible" [ngClass]="column.styleClassObject"
        class="data-column" [attr.data-label]="column.header"
        [style.background-color]="column.getCellColor(_this, index)">
      <div *ngIf="!column.cellTemplate" [textContent]="item[column.property]"></div>
      <div *ngIf="column.cellTemplate" [ngTemplateOutlet]="column.cellTemplate"
           [ngTemplateOutletContext]="{column: column, row: _this, item: item}"></div>
    </td>
  </ng-template>
</tr>
<tr *ngIf="dataTable.expandableRows" [hide]="!expanded" class="row-expansion">
  <td [attr.colspan]="dataTable.columnCount">
    <div [ngTemplateOutlet]="dataTable.expandTemplate" [ngTemplateOutletContext]="{row: _this, item: item}"></div>
  </td>
</tr>
`,
                styles: [`.select-column{text-align:center}.row-expand-button{-webkit-box-sizing:content-box;box-sizing:content-box;background:0 0;border:0;color:inherit;cursor:pointer;font:inherit;line-height:normal;overflow:visible;padding:.15rem .75rem;-webkit-appearance:button;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none}.clickable{cursor:pointer}th{font-weight:initial}`]
            },] },
];
/** @nocollapse */
DataTableRowComponent.ctorParameters = () => [
    { type: DataTableComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => DataTableComponent)),] }] },
    { type: Renderer2 },
    { type: ElementRef }
];
DataTableRowComponent.propDecorators = {
    item: [{ type: Input }],
    index: [{ type: Input }],
    selectedChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const defaultTranslations = {
    headerReload: 'reload {title} table',
    headerColumnSelector: 'column selector - adds or removes columns from {title} table',
    headerColumnSelectorAdded: '{column_name} added to {title} table',
    headerColumnSelectorRemoved: '{column_name} removed from {title} table',
    indexColumn: 'index',
    selectColumn: 'select',
    selectRow: 'select {cell_content}',
    selectAllRows: 'select all rows',
    expandColumn: 'expand',
    expandRow: 'expand {cell_content}',
    sortedAscending: '{title} table sorted by {header} ascending',
    sortedDescending: '{title} table sorted by {header} descending',
    sortAscending: 'activate to sort ascending',
    sortDescending: 'activate to sort descending',
    paginationLimit: 'Limit',
    paginationText: 'Results: {from} to {to} of {total}',
    paginationTotalPages: 'of',
    firstPage: 'first page',
    prevPage: 'previous page',
    pageNumberLabel: 'Page',
    pageNumber: 'page number',
    pageNumberNofM: '({N} of {M})',
    nextPage: 'next page',
    lastPage: 'last page',
    loadingText: '{title} table is loading',
    loadedText: '{title} table loaded',
    addFilter: 'Add filter',
    searchField: 'Search Field',
    selectedValueRequired: 'You must select a value',
    validDateRequired: 'You must enter valid date',
    valueRequired: 'You must enter a value',
    numericValueRequired: 'You must enter a numeric value',
    apply: 'Apply',
    value: 'Value',
    date: 'Date',
    not: 'Not',
    filterOperators: {
        'lt': '<',
        'gt': '>',
        'lte': '<=',
        'gte': '>=',
        'eq': '=',
        'ne': 'not equal to',
        'contains': 'contains',
        'not_contains': 'not contains',
        'starts': 'starts with',
        'ends': 'ends with',
        'empty': 'is empty',
        'true': 'true',
        'false': 'false'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*tslint:disable-next-line*/
/**
 * @param {?} event
 * @param {?} __1
 * @return {?}
 */
function drag(event, { move: move, up: up }) {
    /** @type {?} */
    const startX = event.pageX;
    /** @type {?} */
    const startY = event.pageY;
    /** @type {?} */
    let x = startX;
    /** @type {?} */
    let y = startY;
    /** @type {?} */
    let moved = false;
    /**
     * @param {?} evt
     * @return {?}
     */
    function mouseMoveHandler(evt) {
        /** @type {?} */
        const dx = evt.pageX - x;
        /** @type {?} */
        const dy = evt.pageY - y;
        x = evt.pageX;
        y = evt.pageY;
        if (dx || dy) {
            moved = true;
        }
        move(evt, dx, dy, x, y);
        event.preventDefault(); // to avoid text selection
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    function mouseUpHandler(evt) {
        x = evt.pageX;
        y = evt.pageY;
        document.removeEventListener('mousemove', mouseMoveHandler);
        document.removeEventListener('mouseup', mouseUpHandler);
        if (up) {
            up(event, x, y, moved);
        }
    }
    document.addEventListener('mousemove', mouseMoveHandler);
    document.addEventListener('mouseup', mouseUpHandler);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let nextId = 0;
class DataTableComponent {
    constructor() {
        this._items = [];
        // One-time optional bindings with default values:
        this.title = '';
        this.showTitle = true;
        this.header = true;
        this.pagination = true;
        this.indexColumn = true;
        this.indexColumnHeader = '';
        this.selectColumn = false;
        this.multiSelect = true;
        this.substituteRows = true;
        this.expandableRows = false;
        this.selectOnRowClick = false;
        this.autoReload = true;
        this.showReloading = false;
        this.pageLimits = [10, 25, 50, 100, 250];
        this.primaryColumn = '';
        this.tableCssClass = '';
        this.tableContainerCssClass = '';
        // reload emitter
        this.reload = new EventEmitter();
        // event handlers:
        this.rowClick = new EventEmitter();
        this.rowDoubleClick = new EventEmitter();
        this.headerClick = new EventEmitter();
        this.cellClick = new EventEmitter();
        this.refreshClick = new EventEmitter();
        this.filterAdded = new EventEmitter();
        this.filterRemoved = new EventEmitter();
        this.filterUpdated = new EventEmitter();
        this.filterChanged = new EventEmitter();
        this._displayParams = (/** @type {?} */ ({})); // params of the last finished reload
        // params of the last finished reload
        this.subject = new Subject();
        this.notifier = new Subject();
        this.selectedRows = [];
        this.id = `datatable-${nextId++}`;
        // select all checkbox flag
        this._selectAllCheckbox = false;
        // column resizing:
        this._resizeInProgress = false;
        this.resizeLimit = 30;
        // Reloading:
        this._reloading = false;
        this._sortAsc = true;
        this._offset = 0;
        this._limit = 10;
    }
    /**
     * @return {?}
     */
    get items() {
        return this._items;
    }
    /**
     * @param {?} items
     * @return {?}
     */
    set items(items) {
        this._items = items;
        // no need to call notifier.next() because _onReloadFinished()
        // will change reloaded value causing notifier.next() to be called implicitly.
        this._onReloadFinished();
    }
    /**
     * @return {?}
     */
    get itemCount() {
        return this._itemCount;
    }
    /**
     * @param {?} count
     * @return {?}
     */
    set itemCount(count) {
        this._itemCount = count;
        this.notifier.next();
    }
    /**
     * @return {?}
     */
    get reloading() {
        return this._reloading;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set reloading(val) {
        this._reloading = val;
        this.notifier.next();
    }
    /**
     * @return {?}
     */
    get sortBy() {
        return this._sortBy;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set sortBy(value) {
        this._sortBy = value;
        this.subject.next();
    }
    /**
     * @return {?}
     */
    get sortAsc() {
        return this._sortAsc;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set sortAsc(value) {
        this._sortAsc = value;
        this.subject.next();
    }
    /**
     * @return {?}
     */
    get offset() {
        return this._offset;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set offset(value) {
        this._offset = value;
        this.subject.next();
    }
    /**
     * @return {?}
     */
    get limit() {
        return this._limit;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set limit(value) {
        this._limit = value;
        this.subject.next();
    }
    // calculated property:
    /**
     * @return {?}
     */
    get page() {
        return this.itemCount !== 0 ? Math.floor(this.offset / this.limit) + 1 : 0;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set page(value) {
        this.offset = (value - 1) * this.limit;
    }
    /**
     * @return {?}
     */
    get lastPage() {
        return Math.ceil(this.itemCount / this.limit);
    }
    // setting multiple observable properties simultaneously
    /**
     * @param {?} sortBy
     * @param {?} asc
     * @return {?}
     */
    sort(sortBy, asc) {
        this.sortBy = sortBy;
        this.sortAsc = asc;
    }
    // init
    /**
     * @return {?}
     */
    ngOnInit() {
        this._initDefaultValues();
        this._initDefaultClickEvents();
        this._updateDisplayParams();
        if (this.pageLimits.indexOf(this.limit) < 0) {
            this.limit = this.pageLimits[0];
        }
        this.labels = Object.assign({}, defaultTranslations, this.labels);
        if (this.autoReload) {
            this.reloadItems();
        }
        this.notifier$ = this.notifier.subscribe((/**
         * @return {?}
         */
        () => this._notify()));
        this.subject$ = this.subject.pipe(debounceTime(100)).subscribe((/**
         * @return {?}
         */
        () => this.reloadItems()));
    }
    /**
     * @private
     * @return {?}
     */
    _initDefaultValues() {
        this.indexColumnVisible = this.indexColumn;
        this.selectColumnVisible = this.selectColumn;
        this.expandColumnVisible = this.expandableRows;
    }
    /**
     * @private
     * @return {?}
     */
    _initDefaultClickEvents() {
        this.headerClick.subscribe((/**
         * @param {?} tableEvent
         * @return {?}
         */
        (tableEvent) => this.sortColumn(tableEvent.column)));
        if (this.selectOnRowClick) {
            this.rowClick.subscribe((/**
             * @param {?} tableEvent
             * @return {?}
             */
            (tableEvent) => tableEvent.row.selected = !tableEvent.row.selected));
        }
    }
    /**
     * @return {?}
     */
    reloadItems() {
        this.reloading = true;
        this.reload.emit(this._getRemoteParameters());
    }
    /**
     * @private
     * @return {?}
     */
    _onReloadFinished() {
        if (this.reloading) {
            this._updateDisplayParams();
            this._selectAllCheckbox = false;
            this.reloading = false;
        }
    }
    /**
     * @return {?}
     */
    get displayParams() {
        return this._displayParams;
    }
    /**
     * @return {?}
     */
    _updateDisplayParams() {
        this._displayParams = {
            sortBy: this.sortBy,
            sortAsc: this.sortAsc,
            offset: this.offset,
            limit: this.limit
        };
    }
    /**
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    rowClicked(row, event) {
        this.rowClick.emit({ row, event });
    }
    /**
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    rowDoubleClicked(row, event) {
        this.rowDoubleClick.emit({ row, event });
    }
    /**
     * @param {?} column
     * @param {?} event
     * @return {?}
     */
    headerClicked(column, event) {
        if (!this._resizeInProgress) {
            event.preventDefault();
            event.stopPropagation();
            this.headerClick.emit({ column, event });
        }
        else {
            this._resizeInProgress = false; // this is because I can't prevent click from mousup of the drag end
        }
    }
    /**
     * @private
     * @param {?} column
     * @param {?} row
     * @param {?} event
     * @return {?}
     */
    cellClicked(column, row, event) {
        this.cellClick.emit({ row, column, event });
    }
    // functions:
    /**
     * @private
     * @return {?}
     */
    _getRemoteParameters() {
        /** @type {?} */
        const params = (/** @type {?} */ ({}));
        if (this.sortBy) {
            params.sortBy = this.sortBy;
            params.sortAsc = this.sortAsc;
        }
        if (this.pagination) {
            params.offset = this.offset;
            params.limit = this.limit;
        }
        return params;
    }
    /**
     * @private
     * @param {?} column
     * @return {?}
     */
    sortColumn(column) {
        if (column.sortable) {
            /** @type {?} */
            const ascending = this.sortBy === column.property ? !this.sortAsc : true;
            this.sort(column.property, ascending);
        }
    }
    /**
     * @return {?}
     */
    get columnCount() {
        /** @type {?} */
        let count = 0;
        count += this.indexColumnVisible ? 1 : 0;
        count += this.selectColumnVisible ? 1 : 0;
        count += this.expandColumnVisible ? 1 : 0;
        this.columns.toArray().forEach((/**
         * @param {?} column
         * @return {?}
         */
        column => {
            count += column.visible ? 1 : 0;
        }));
        return count;
    }
    /**
     * @param {?} item
     * @param {?} index
     * @param {?} row
     * @return {?}
     */
    getRowColor(item, index, row) {
        if (this.rowColors !== undefined) {
            return ((/** @type {?} */ (this.rowColors)))(item, row, index);
        }
    }
    /**
     * @return {?}
     */
    get selectAllCheckbox() {
        return this._selectAllCheckbox;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectAllCheckbox(value) {
        this._selectAllCheckbox = value;
        this._onSelectAllChanged(value);
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _onSelectAllChanged(value) {
        this.rows.toArray().forEach((/**
         * @param {?} row
         * @return {?}
         */
        row => row.selected = value));
    }
    /**
     * @param {?} row
     * @return {?}
     */
    onRowSelectChanged(row) {
        // maintain the selectedRow(s) view
        if (this.multiSelect) {
            /** @type {?} */
            const index = this.selectedRows.indexOf(row);
            if (row.selected && index < 0) {
                this.selectedRows.push(row);
            }
            else if (!row.selected && index >= 0) {
                this.selectedRows.splice(index, 1);
            }
        }
        else {
            if (row.selected) {
                this.selectedRow = row;
            }
            else if (this.selectedRow === row) {
                delete this.selectedRow;
            }
        }
        // unselect all other rows:
        if (row.selected && !this.multiSelect) {
            this.rows.toArray().filter((/**
             * @param {?} row_
             * @return {?}
             */
            row_ => row_.selected)).forEach((/**
             * @param {?} row_
             * @return {?}
             */
            row_ => {
                if (row_ !== row) { // avoid endless loop
                    row_.selected = false;
                }
            }));
        }
    }
    // other:
    /**
     * @return {?}
     */
    get substituteItems() {
        return Array.from({ length: this.displayParams.limit - this.items.length });
    }
    /**
     * @private
     * @param {?} event
     * @param {?} column
     * @param {?} columnElement
     * @return {?}
     */
    resizeColumnStart(event, column, columnElement) {
        this._resizeInProgress = true;
        /** @type {?} */
        let startOffset = columnElement.offsetWidth - event.pageX;
        drag(event, {
            move: (/**
             * @param {?} moveEvent
             * @param {?} dx
             * @return {?}
             */
            (moveEvent, dx) => {
                if (this._isResizeInLimit(columnElement, dx)) {
                    column.width = startOffset + moveEvent.pageX + dx;
                }
            }),
        });
    }
    /**
     * @private
     * @param {?} columnElement
     * @param {?} dx
     * @return {?}
     */
    _isResizeInLimit(columnElement, dx) {
        /* This is needed because CSS min-width didn't work on table-layout: fixed.
             Without the limits, resizing can make the next column disappear completely,
             and even increase the table width. The current implementation suffers from the fact,
             that offsetWidth sometimes contains out-of-date values. */
        if ((dx < 0 && (columnElement.offsetWidth + dx) <= this.resizeLimit) ||
            !columnElement.nextElementSibling || // resizing doesn't make sense for the last visible column
            (dx >= 0 && (((/** @type {?} */ (columnElement.nextElementSibling))).offsetWidth + dx) <= this.resizeLimit)) {
            return false;
        }
        return true;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.primaryColumn === '') {
            this.primaryColumn = ((/** @type {?} */ (this.columns.first))).property;
        }
    }
    /**
     * @return {?}
     */
    _notify() {
        /** @type {?} */
        const loading = this.reloading;
        this.reloadNotification = loading ?
            this.labels.loadingText.replace('{title}', this.title) :
            this.labels.loadedText.replace('{title}', this.title);
        if (!loading) {
            if (this.pagination) {
                this.paginationNotification = this.labels.paginationText
                    .replace('{from}', '' + (Math.ceil(this.itemCount / this.limit) !== 0 ? this.offset + 1 : '0'))
                    .replace('{to}', '' + (Math.min(this.offset + this.limit, this.itemCount)))
                    .replace('{total}', '' + this.itemCount);
            }
            else {
                this.paginationNotification = '';
            }
            if (this.columns !== undefined && this.sortBy !== undefined) {
                /** @type {?} */
                const col = (/** @type {?} */ (this.columns.toArray().find((/**
                 * @param {?} column
                 * @return {?}
                 */
                column => column.property === this.sortBy))));
                this.sortNotification = (this.sortAsc ? this.labels.sortedAscending : this.labels.sortedDescending)
                    .replace('{title}', this.title)
                    .replace('{header}', col.header);
            }
            else {
                this.sortNotification = '';
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subject$.unsubscribe();
        this.notifier$.unsubscribe();
    }
}
DataTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'data-table',
                template: `<div class="data-table-wrapper">
  <span class="sr-only" role="status" aria-live="polite" aria-atomic="false" aria-relevant="text">
    <span [textContent]="reloadNotification"></span>
    <span [textContent]="paginationNotification"></span>
    <span [textContent]="sortNotification"></span>
    <span [textContent]="columnSelectorNotification"></span>
  </span>

  <data-table-header *ngIf="header"></data-table-header>
  <filter-bar *ngIf="filterableFields && filterableFields.length > 0"></filter-bar>

  <div class="data-table-box {{tableContainerCssClass}}">
    <table class="table data-table {{tableCssClass}}" [id]="id">
      <caption class="sr-only" [textContent]="title"></caption>
      <thead>
      <tr>
        <td [hide]="!expandColumnVisible" class="expand-column-header">
        </td>
        <th scope="col" [hide]="!indexColumnVisible" class="index-column-header">
          <span [textContent]="indexColumnHeader"></span>
        </th>
        <td [hide]="!selectColumnVisible" class="select-column-header">
          <input [hide]="!multiSelect"
                 type="checkbox"
                 [(ngModel)]="selectAllCheckbox"
                 [disabled]="itemCount === 0"
                 [title]="labels.selectAllRows"
                 [attr.aria-label]="labels.selectAllRows"/>
        </td>
        <th *ngFor="let column of columns, index as i" #th
            [hide]="!column.visible"
            [class.sortable]="column.sortable"
            [class.resizable]="column.resizable"
            scope="col"
            [attr.aria-sort]="column.sortable ? (column.property === sortBy ? (sortAsc ? 'ascending' : 'descending') : 'none') : null"
            [ngClass]="column.styleClassObject" class="column-header" [style.width]="column.width | px" >
          <button *ngIf="column.sortable" (click)="headerClicked(column, $event)"
                  [attr.aria-controls]="column.sortable ? id : null"
                  [disabled]="itemCount === 0"
                  [attr.aria-labelledby]="'col-'+id+'-'+i"
                  [title]="!sortAsc ? labels.sortAscending : labels.sortDescending">
            <span *ngIf="!column.headerTemplate" [id]="'col-'+id+'-'+i"
                  [textContent]="column.header"></span>
            <span *ngIf="column.headerTemplate" [ngTemplateOutlet]="column.headerTemplate"
                  [ngTemplateOutletContext]="{column: column}"></span>
            <span class="column-sort-icon" *ngIf="column.sortable">
              <i [hide]="column.property === sortBy" class="fa fa-sort column-sortable-icon"
                aria-hidden="true"></i>
              <i [hide]="column.property !== sortBy" class="fa"
                [ngClass]="{'fa-sort-asc': sortAsc, 'fa-sort-desc': !sortAsc}" aria-hidden="true"></i>
            </span>
            <span *ngIf="column.resizable" class="column-resize-handle"
                  (mousedown)="resizeColumnStart($event, column, th)"></span>
          </button>
          <span *ngIf="!column.sortable">
            <span *ngIf="!column.headerTemplate"
                  [textContent]="column.header"></span>
            <span *ngIf="column.headerTemplate" [ngTemplateOutlet]="column.headerTemplate"
                  [ngTemplateOutletContext]="{column: column}"></span>
            <span class="column-sort-icon" *ngIf="column.sortable">
               <i [hide]="column.property === sortBy" class="fa fa-sort column-sortable-icon"
                  aria-hidden="true"></i>
               <i [hide]="column.property !== sortBy" class="fa"
                  [ngClass]="{'fa-sort-asc': sortAsc, 'fa-sort-desc': !sortAsc}" aria-hidden="true"></i>
            </span>
            <span *ngIf="column.resizable" class="column-resize-handle"
                  (mousedown)="resizeColumnStart($event, column, th)"></span>
          </span>
        </th>
      </tr>
      </thead>
      <tbody *ngFor="let item of items; let index=index" class="data-table-row-wrapper"
             dataTableRow #row [item]="item" [index]="index" (selectedChange)="onRowSelectChanged(row)">
      </tbody>
      <tbody *ngIf="itemCount === 0 && noDataMessage">
        <tr>
          <td [attr.colspan]="columnCount">{{ noDataMessage }}</td>
        </tr>
      </tbody>
      <tbody class="substitute-rows" *ngIf="pagination && substituteRows">
      <tr *ngFor="let item of substituteItems, let index = index"
          [class.row-odd]="(index + items.length) % 2 === 0"
          [class.row-even]="(index + items.length) % 2 === 1" role="presentation">
        <td [hide]="!expandColumnVisible"></td>
        <td [hide]="!indexColumnVisible">&nbsp;</td>
        <td [hide]="!selectColumnVisible"></td>
        <td *ngFor="let column of columns" [hide]="!column.visible">
      </tr>
      </tbody>
    </table>
    <div class="busy" *ngIf="showReloading && reloading">
      <i><i class="fa fa-spin fa-cog fa-2x"></i></i>
    </div>
  </div>

  <data-table-pagination *ngIf="pagination" [limits]="pageLimits"></data-table-pagination>
</div>
`,
                styles: [`:host /deep/ .data-table.table>tbody+tbody{border-top:none}:host /deep/ .data-table.table td{vertical-align:middle}:host /deep/ .data-table>tbody>tr>td,:host /deep/ .data-table>thead>tr>th{overflow:hidden}:host /deep/ .data-table>thead>tr>td{border-bottom:2px solid #dee2e6}:host /deep/ .row-odd{background-color:#f6f6f6}.data-table .substitute-rows>tr:hover,:host /deep/ .data-table .data-table-row:hover{background-color:#ececec}.data-table{-webkit-box-shadow:0 0 15px #ececec;box-shadow:0 0 15px #ececec;table-layout:fixed}.column-header{position:relative}.expand-column-header{width:50px}.select-column-header{width:50px;text-align:center}.index-column-header{width:40px}.column-header.sortable button{-webkit-box-sizing:content-box;box-sizing:content-box;background:0 0;border:0;color:inherit;cursor:pointer;font:inherit;line-height:normal;overflow:visible;padding:0;-webkit-appearance:button;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;text-align:left}.column-header .column-sort-icon{margin-left:8px}.column-header.resizable .column-sort-icon{margin-right:8px}.column-header .column-sort-icon .column-sortable-icon{color:#d3d3d3}.column-header .column-resize-handle{position:absolute;top:0;right:0;margin:0;padding:0;width:8px;height:100%;cursor:col-resize}.data-table-box{position:relative}.busy{position:absolute;z-index:1;top:0;bottom:0;left:0;right:0;background-color:rgba(0,0,0,.25)}.busy>i{position:absolute;left:50%;top:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}`]
            },] },
];
/** @nocollapse */
DataTableComponent.ctorParameters = () => [];
DataTableComponent.propDecorators = {
    items: [{ type: Input }],
    itemCount: [{ type: Input }],
    columns: [{ type: ContentChildren, args: [DataTableColumnDirective,] }],
    rows: [{ type: ViewChildren, args: [DataTableRowComponent,] }],
    expandTemplate: [{ type: ContentChild, args: ['dataTableExpand',] }],
    title: [{ type: Input }],
    showTitle: [{ type: Input }],
    header: [{ type: Input }],
    pagination: [{ type: Input }],
    indexColumn: [{ type: Input }],
    indexColumnHeader: [{ type: Input }],
    rowColors: [{ type: Input }],
    rowTooltip: [{ type: Input }],
    filterableFields: [{ type: Input }],
    filters: [{ type: Input }],
    selectColumn: [{ type: Input }],
    multiSelect: [{ type: Input }],
    substituteRows: [{ type: Input }],
    expandableRows: [{ type: Input }],
    labels: [{ type: Input }],
    selectOnRowClick: [{ type: Input }],
    autoReload: [{ type: Input }],
    showReloading: [{ type: Input }],
    noDataMessage: [{ type: Input }],
    pageLimits: [{ type: Input }],
    primaryColumn: [{ type: Input }],
    tableCssClass: [{ type: Input }],
    tableContainerCssClass: [{ type: Input }],
    reload: [{ type: Output }],
    rowClick: [{ type: Output }],
    rowDoubleClick: [{ type: Output }],
    headerClick: [{ type: Output }],
    cellClick: [{ type: Output }],
    refreshClick: [{ type: Output }],
    filterAdded: [{ type: Output, args: ['filterAdded',] }],
    filterRemoved: [{ type: Output, args: ['filterRemoved',] }],
    filterUpdated: [{ type: Output, args: ['filterUpdated',] }],
    filterChanged: [{ type: Output, args: ['filterChanged',] }],
    sortBy: [{ type: Input }],
    sortAsc: [{ type: Input }],
    offset: [{ type: Input }],
    limit: [{ type: Input }],
    page: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataTableHeaderComponent {
    /**
     * @param {?} dataTable
     * @param {?} elemRef
     */
    constructor(dataTable, elemRef) {
        this.dataTable = dataTable;
        this.elemRef = elemRef;
        this.columnSelectorOpen = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClickHandler(event) {
        if (!this.elemRef.nativeElement.contains(event.target)) {
            this.columnSelectorOpen = false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyUpHandler(event) {
        if (event.keyCode === 27 || (event.keyCode === 9 && !this.elemRef.nativeElement.contains(event.target))) {
            this.columnSelectorOpen = false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChange(event) {
        /** @type {?} */
        const isChecked = ((/** @type {?} */ (event.target))).checked;
        /** @type {?} */
        const columnName = ((/** @type {?} */ (event.target))).parentElement.textContent.trim();
        /** @type {?} */
        const interpolateParams = {
            'column_name': columnName,
            'title': this.dataTable.title
        };
        this.dataTable.columnSelectorNotification = (isChecked ? this.dataTable.labels.headerColumnSelectorAdded :
            this.dataTable.labels.headerColumnSelectorRemoved)
            .replace('{column_name}', interpolateParams.column_name)
            .replace('{title}', interpolateParams.title);
    }
}
DataTableHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'data-table-header',
                template: `<div class="data-table-header">
  <p class="h4 title" *ngIf="dataTable.showTitle" [textContent]="dataTable.title"></p>
  <div class="button-panel">
    <button type="button" class="btn btn-default btn-sm refresh-button"
            (click)="dataTable.refreshClick.emit()"
            [title]="dataTable.labels.headerReload.replace('{title}', dataTable.title)">
      <i class="fa fa-refresh" aria-hidden="true"></i>
    </button>
    <button type="button" class="btn btn-default btn-sm column-selector-button" [class.active]="columnSelectorOpen"
            [attr.aria-haspopup]="true"
            [attr.aria-expanded]="columnSelectorOpen"
            (click)="columnSelectorOpen = !columnSelectorOpen;"
            [title]="dataTable.labels.headerColumnSelector.replace('{title}', dataTable.title)">
      <i class="fa fa-list" aria-hidden="true"></i>
    </button>
    <div class="column-selector-wrapper">
      <div *ngIf="columnSelectorOpen" class="column-selector-box panel panel-default">
        <ul class="list-group list-group-flush">
          <li *ngIf="dataTable.expandableRows" class="list-group-item column-selector-column checkbox">
            <label class="d-flex align-items-center">
              <input type="checkbox" [(ngModel)]="dataTable.expandColumnVisible" (change)="onChange($event)" [attr.aria-controls]="dataTable.id"/>
              <span [textContent]="dataTable.labels.expandColumn"></span>
            </label>
          </li>
          <li *ngIf="dataTable.indexColumn" class="list-group-item column-selector-column checkbox">
            <label class="d-flex align-items-center">
              <input type="checkbox" [(ngModel)]="dataTable.indexColumnVisible" (change)="onChange($event)" [attr.aria-controls]="dataTable.id"/>
              <span [textContent]="dataTable.labels.indexColumn"></span>
            </label>
          </li>
          <li *ngIf="dataTable.selectColumn" class="list-group-item column-selector-column checkbox">
            <label class="d-flex align-items-center">
              <input type="checkbox" [(ngModel)]="dataTable.selectColumnVisible" (change)="onChange($event)" [attr.aria-controls]="dataTable.id"/>
              <span [textContent]="dataTable.labels.selectColumn"></span>
            </label>
          </li>
          <ng-template ngFor let-item let-i="index" [ngForOf]="dataTable.columns">
            <li class="list-group-item column-selector-column checkbox"
                *ngIf="dataTable.primaryColumn !== item.property">
              <label class="d-flex align-items-center">
                <input type="checkbox" [(ngModel)]="item.visible" (change)="onChange($event)" [attr.aria-controls]="dataTable.id"/>
                <span [textContent]="item.header"></span>
              </label>
            </li>
          </ng-template>
        </ul>
      </div>
    </div>
  </div>
</div>
`,
                styles: [`.data-table-header{min-height:25px;margin-bottom:10px}.title{display:inline-block;margin:5px 0 0 5px}.button-panel{float:right}.button-panel button{outline:0!important}.column-selector-wrapper{position:relative}.column-selector-box{-webkit-box-shadow:0 0 10px #d3d3d3;box-shadow:0 0 10px #d3d3d3;background:#fff;width:150px;padding:10px;position:absolute;right:0;top:1px;z-index:1060}.column-selector-box .list-group-item.column-selector-column{padding:.5rem .25rem}.column-selector-box .list-group-item.column-selector-column label{margin-bottom:0}.column-selector-box .list-group-item.column-selector-column input{margin-right:4px;font-style:italic}`]
            },] },
];
/** @nocollapse */
DataTableHeaderComponent.ctorParameters = () => [
    { type: DataTableComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => DataTableComponent)),] }] },
    { type: ElementRef }
];
DataTableHeaderComponent.propDecorators = {
    onClickHandler: [{ type: HostListener, args: ['document:click', ['$event'],] }],
    onKeyUpHandler: [{ type: HostListener, args: ['document:keyup', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let nextId$1 = 0;
class DataTablePaginationComponent {
    /**
     * @param {?} dataTable
     */
    constructor(dataTable) {
        this.dataTable = dataTable;
        this.id = `pagination-${nextId$1++}`;
        this.Math = Math;
    }
    /**
     * @return {?}
     */
    pageBack() {
        this.dataTable.offset -= Math.min(this.dataTable.limit, this.dataTable.offset);
        if (this.dataTable.offset <= 0) {
            this.pageInput.nativeElement.focus();
        }
    }
    /**
     * @return {?}
     */
    pageForward() {
        this.dataTable.offset += this.dataTable.limit;
        if ((this.dataTable.offset + this.dataTable.limit) >= this.dataTable.itemCount) {
            this.pageInput.nativeElement.focus();
        }
    }
    /**
     * @return {?}
     */
    pageFirst() {
        this.dataTable.offset = 0;
        this.pageInput.nativeElement.focus();
    }
    /**
     * @return {?}
     */
    pageLast() {
        this.dataTable.offset = (this.maxPage - 1) * this.dataTable.limit;
        if ((this.dataTable.offset + this.dataTable.limit) >= this.dataTable.itemCount) {
            this.pageInput.nativeElement.focus();
        }
    }
    /**
     * @return {?}
     */
    get maxPage() {
        return Math.ceil(this.dataTable.itemCount / this.dataTable.limit);
    }
    /**
     * @return {?}
     */
    get limit() {
        return this.dataTable.limit;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set limit(value) {
        this.dataTable.limit = +value;
        // returning back to the first page.
        this.page = 1;
    }
    /**
     * @return {?}
     */
    get page() {
        return this.dataTable.page;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set page(value) {
        this.dataTable.page = +value;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    validate(event) {
        /** @type {?} */
        const newValue = +event.target.value;
        if (newValue !== this.page) {
            this.page = (event.target.value > this.maxPage) ? this.maxPage : (newValue < 1) ? 1 : newValue;
            event.target.value = this.page;
        }
    }
}
DataTablePaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'data-table-pagination',
                template: `<div class="d-flex justify-content-between align-items-center">
  <div class="pagination-range">
    <span [textContent]="dataTable.labels.paginationText
        .replace('{from}', this.Math.ceil(dataTable.itemCount / dataTable.limit) !== 0 ? dataTable.offset + 1 + '' : '0')
        .replace('{to}', this.Math.min(dataTable.offset + dataTable.limit, dataTable.itemCount) + '')
        .replace('{total}', dataTable.itemCount + '')"></span>
  </div>
  <div class="pagination-controllers pagination-box d-flex justify-content-between">
    <div class="pagination-limit d-flex justify-content-between">
      <div class="input-group">
        <div class="input-group-prepend">
          <label [attr.for]="id + '-page-limit'" class="input-group-text" [textContent]="dataTable.labels.paginationLimit"></label>
        </div>
        <select [id]="id + '-page-limit'" class="form-control" [(ngModel)]="limit" [disabled]="dataTable.itemCount === 0">
          <option *ngFor="let l of limits" [value]="l">{{ l }}</option>
        </select>
      </div>
    </div>
    <div class="pagination-pages d-flex justify-content-between">
      <button [disabled]="dataTable.offset <= 0"
              (click)="pageFirst()"
              class="btn btn-default pagination-firstpage"
              [title]="dataTable.labels.firstPage"
              [attr.aria-controls]="dataTable.id">
        <i class="fa fa-angle-double-left" aria-hidden="true"></i>
      </button>
      <button [disabled]="dataTable.offset <= 0"
              (click)="pageBack()"
              class="btn btn-default pagination-prevpage"
              [title]="dataTable.labels.prevPage"
              [attr.aria-controls]="dataTable.id">
        <i class="fa fa-angle-left" aria-hidden="true"></i>
      </button>
      <div class="pagination-page">
        <div class="input-group">
          <div class="input-group-prepend">
            <label class="input-group-text" [attr.for]="id + '-page-input'">
              {{ dataTable.labels.pageNumberLabel }}
            </label>
          </div>
          <input #pageInput type="number"
                 [id]="id + '-page-input'"
                 class="form-control" min="1" step="1" max="{{maxPage}}"
                 [disabled]="dataTable.itemCount === 0"
                 [ngModel]="page"
                 (blur)="validate($event)"
                 (keyup.enter)="validate($event)"
                 (keyup.esc)="pageInput.value = page"
                 [title]="dataTable.labels.pageNumber + ' ' +
                    dataTable.labels.pageNumberNofM.replace('{N}', ''+page).replace('{M}', ''+maxPage)"
                 [attr.aria-controls]="dataTable.id"/>
          <div class="input-group-append">
            <span class="input-group-text">
              {{ dataTable.labels.paginationTotalPages }}&nbsp;{{ dataTable.lastPage }}
            </span>
          </div>
        </div>
      </div>
      <button [disabled]="(dataTable.offset + dataTable.limit) >= dataTable.itemCount"
              (click)="pageForward()"
              class="btn btn-default pagination-nextpage"
              [title]="dataTable.labels.nextPage"
              [attr.aria-controls]="dataTable.id">
        <i class="fa fa-angle-right" aria-hidden="true"></i>
      </button>
      <button [disabled]="(dataTable.offset + dataTable.limit) >= dataTable.itemCount"
              (click)="pageLast()"
              class="btn btn-default pagination-lastpage"
              [title]="dataTable.labels.lastPage"
              [attr.aria-controls]="dataTable.id">
        <i class="fa fa-angle-double-right" aria-hidden="true"></i>
      </button>
    </div>
  </div>
</div>
`,
                styles: [`.pagination-controllers select{min-width:5rem;text-align:right}.pagination-pages>*{margin:0 .15rem}.pagination-limit{margin-right:1.5rem}.pagination-box button{outline:0!important}`]
            },] },
];
/** @nocollapse */
DataTablePaginationComponent.ctorParameters = () => [
    { type: DataTableComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => DataTableComponent)),] }] }
];
DataTablePaginationComponent.propDecorators = {
    pageInput: [{ type: ViewChild, args: ['pageInput',] }],
    limits: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
class FieldFilterChooserPopupDialog {
    /**
     * @param {?} _dialogCloser
     * @param {?} data
     */
    constructor(_dialogCloser, data) {
        this._dialogCloser = _dialogCloser;
        this.data = data;
        this.fieldSearchQuery = '';
        this.filteredFields = data.fields;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.keyboardEventsManager = new ListKeyManager(this.listItem);
    }
    /**
     * @param {?} searchQuery
     * @return {?}
     */
    onFieldSearch(searchQuery) {
        this.filteredFields = this.data.fields.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => c.header.toLowerCase().indexOf(searchQuery.toLowerCase()) != -1));
    }
    /**
     * @param {?} field
     * @return {?}
     */
    fieldSelected(field) {
        this._dialogCloser(field);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleKeyDown(event) {
        event.stopImmediatePropagation();
        if (this.keyboardEventsManager) {
            if (event.keyCode === DOWN_ARROW || event.keyCode === UP_ARROW) {
                // passing the event to key manager so we get a change fired
                this.keyboardEventsManager.onKeydown(event);
                /** @type {?} */
                let activeItem = (/** @type {?} */ (this.keyboardEventsManager.activeItem));
                if (activeItem == this.activeItem) {
                    event.keyCode === DOWN_ARROW ? this.keyboardEventsManager.setFirstItemActive() : this.keyboardEventsManager.setLastItemActive();
                    activeItem = (/** @type {?} */ (this.keyboardEventsManager.activeItem));
                }
                this.activeItem = activeItem;
                ((/** @type {?} */ (this.keyboardEventsManager.activeItem)))._getHostElement().scrollIntoView();
                return false;
            }
            else if (event.keyCode === ENTER) {
                ((/** @type {?} */ (this.keyboardEventsManager.activeItem)))._getHostElement().click();
                return false;
            }
        }
    }
}
FieldFilterChooserPopupDialog.decorators = [
    { type: Component, args: [{
                selector: 'app-field-filter-chooser-popup-dialog',
                template: `<div class="dialog-container">
  <form class="search-field">
    <mat-form-field>
      <input autocomplete="off" matInput [placeholder]="data.labels.searchField" name="fieldSearchQuery" [ngModel]="fieldSearchQuery"
        (ngModelChange)="onFieldSearch($event)" (keydown)="handleKeyDown($event)">
    </mat-form-field>
  </form>
  <div class="fields-list">
    <mat-nav-list>
      <a tabindex="0" mat-list-item [class.active]="activeItem == listItem" #listItem *ngFor="let field of filteredFields"
        (click)="fieldSelected(field)">{{field.header}}
      </a>
    </mat-nav-list>
  </div>
</div>
`,
                styles: [`.dialog-container{padding-bottom:12px}.search-field{padding:12px 12px 0}.fields-list{max-height:250px;overflow-y:auto}::-webkit-scrollbar{width:6px;background-color:#f5f5f5}::-webkit-scrollbar-thumb{border-radius:10px;-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#d9d9d9}.mat-list-item.active{background:rgba(0,0,0,.04)}`]
            },] },
];
/** @nocollapse */
FieldFilterChooserPopupDialog.ctorParameters = () => [
    { type: Function, decorators: [{ type: Inject, args: [POPUP_DIALOG_CLOSE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
FieldFilterChooserPopupDialog.propDecorators = {
    listItem: [{ type: ViewChildren, args: ['listItem',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Error when invalid control is dirty, touched, or submitted.
 */
class MyErrorStateMatcher {
    /**
     * @param {?} control
     * @param {?} form
     * @return {?}
     */
    isErrorState(control, form) {
        /** @type {?} */
        const isSubmitted = form && form.submitted;
        return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));
    }
}
// @dynamic
class FieldFilterPopupDialog {
    /**
     * @param {?} _dialogCloser
     * @param {?} data
     */
    constructor(_dialogCloser, data) {
        this._dialogCloser = _dialogCloser;
        this.data = data;
        this.MUST_SELECT_VALUE_VALIDATION = this.data.labels.selectedValueRequired;
        this.valuesList = [];
        this.isAtleastOneValueSelected = true;
        this.matcher = new MyErrorStateMatcher();
        this.dataType = this.data.fieldFilter.field.dataType;
        this.filterOperators = FieldFilterPopupDialog.ALL_FILTER_OPERATORS[this.dataType];
        if (!this.filterOperators)
            throw `Data type '${this.dataType}' for field '${this.data.fieldFilter.field.header}' is not recognized`;
        this.selectedOperator = this.data.fieldFilter.operator || this.filterOperators[0];
        this.filterValue = this.dataType == 'date' ? this.toDate(this.data.fieldFilter.value) : this.data.fieldFilter.value;
        if (this.dataType == 'enum') {
            if (this.data.fieldFilter.value)
                this.valuesList = this.valuesList.concat(this.data.fieldFilter.value).filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                v => v != null));
            this.isAtleastOneValueSelected = this.valuesList.length != 0;
        }
        if (this.dataType == 'bool' && this.filterValue == null) {
            this.filterValue = true;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    onFilterApply() {
        /** @type {?} */
        let value = this.filterValue;
        if (this.selectedOperator === 'empty') {
            value = null;
        }
        else {
            if (this.dataType == 'date')
                value = this.formatDate(value);
            if (this.dataType == 'enum')
                value = this.valuesList;
        }
        this._dialogCloser({ field: this.data.fieldFilter.field, operator: this.selectedOperator, value: value });
    }
    /**
     * @param {?} value
     * @param {?} checked
     * @return {?}
     */
    valueCheckChange(value, checked) {
        if (checked) {
            this.valuesList.push(value);
        }
        else {
            /** @type {?} */
            let index = this.valuesList.indexOf(value);
            if (index != -1)
                this.valuesList.splice(index, 1);
        }
        this.isAtleastOneValueSelected = this.valuesList.length != 0;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isValueChecked(value) {
        return this.valuesList.indexOf(value) != -1;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getErrorMessage(field) {
        if (field.hasError('matDatepickerParse'))
            return this.data.labels.validDateRequired;
        else if (field.hasError('required'))
            return this.data.labels.valueRequired;
        else if (field.hasError('pattern'))
            return this.data.labels.numericValueRequired;
        else
            return '';
    }
    /**
     * @param {?} option
     * @return {?}
     */
    getPossibleOptionValue(option) {
        return typeof option === 'string' ? option : option.value;
    }
    /**
     * @param {?} option
     * @return {?}
     */
    getPossibleOptionDisplayText(option) {
        return typeof option === 'string' ? option : option.displayText;
    }
    /**
     * @private
     * @param {?} d
     * @return {?}
     */
    formatDate(d) {
        return [d.getDate(), d.getMonth() + 1, d.getFullYear()].join('/');
    }
    /**
     * @private
     * @param {?} s
     * @return {?}
     */
    toDate(s) {
        if (!s)
            return new Date();
        /** @type {?} */
        let split = s.split('/');
        return new Date(Number(split[2]), Number(split[1]) - 1, Number(split[0]));
    }
}
FieldFilterPopupDialog.numericOperators = ['lt', 'gt', 'lte', 'gte', 'eq', 'ne', 'empty'];
FieldFilterPopupDialog.textualOperators = ['contains', 'not_contains', 'starts', 'ends', 'eq', 'ne', 'empty'];
FieldFilterPopupDialog.enumOperators = ['eq', 'ne', 'empty'];
FieldFilterPopupDialog.boolOperators = ['eq'];
FieldFilterPopupDialog.ALL_FILTER_OPERATORS = {
    "number": FieldFilterPopupDialog.numericOperators,
    "date": FieldFilterPopupDialog.numericOperators,
    "text": FieldFilterPopupDialog.textualOperators,
    "enum": FieldFilterPopupDialog.enumOperators,
    "bool": FieldFilterPopupDialog.boolOperators
};
FieldFilterPopupDialog.decorators = [
    { type: Component, args: [{
                selector: 'app-field-filter-popup-dialog',
                template: `<div>
  <form #f="ngForm" (ngSubmit)="((f.valid && isAtleastOneValueSelected) || selectedOperator == 'empty') && onFilterApply()">
    <div class="header">
      <span class="field-label">{{data.fieldFilter.field.header}}</span>
      <button mat-dialog-close class="icon-button" mat-icon-button>
        <mat-icon aria-label="close">close</mat-icon>
      </button>
    </div>
    <div class="content">
      <div class="filter-operator">
        <div class="mat-auto-width">
          <mat-form-field>
            <mat-select [(value)]="selectedOperator">
              <mat-option *ngFor="let operator of filterOperators" [value]="operator">
                {{data.labels.filterOperators[operator]}}
              </mat-option>
            </mat-select>
          </mat-form-field>
        </div>
      </div>
      <div class="ml-2 mat-auto-width">
        <ng-container *ngIf="dataType == 'number' && selectedOperator !== 'empty'">
          <ng-container *ngTemplateOutlet="numericField"></ng-container>
        </ng-container>
        <ng-container *ngIf="dataType == 'date' && selectedOperator !== 'empty'">
          <ng-container *ngTemplateOutlet="dateField"></ng-container>
        </ng-container>
        <ng-container *ngIf="dataType == 'text' && selectedOperator !== 'empty'">
          <ng-container *ngTemplateOutlet="textField"></ng-container>
        </ng-container>
        <ng-container *ngIf="dataType == 'enum' && selectedOperator !== 'empty'">
          <ng-container *ngTemplateOutlet="valuesListField; context: {options: data.fieldFilter.field.possibleOptions, form: f}"></ng-container>
        </ng-container>
        <ng-container *ngIf="dataType == 'bool' && selectedOperator !== 'empty'">
          <ng-container *ngTemplateOutlet="booleanField"></ng-container>
        </ng-container>
      </div>
    </div>
    <div class="footer">
      <button type="submit" class="mx-1" mat-button>{{data.labels.apply}}</button>
    </div>


    <ng-template #dateField>
      <mat-form-field hideRequiredMarker="true" floatLabel="never">
        <input cdkFocusInitial autocomplete="off" matInput [errorStateMatcher]="matcher" #filterValueInput="ngModel" name="filterValue"
          [(ngModel)]="filterValue" [matDatepicker]="picker" [placeholder]="data.labels.date" class="ltr" required>
        <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>
        <mat-datepicker #picker panelClass="field-filter-popup-value-panel"></mat-datepicker>
        <mat-error *ngIf="filterValueInput && filterValueInput.invalid">{{getErrorMessage(filterValueInput)}}</mat-error>
      </mat-form-field>
    </ng-template>

    <ng-template #numericField>
      <mat-form-field hideRequiredMarker="true" floatLabel="never">
        <input cdkFocusInitial autocomplete="off" matInput [placeholder]="data.labels.value" [errorStateMatcher]="matcher"
          #filterValueInput="ngModel" name="filterValue" [(ngModel)]="filterValue" required pattern="^[0-9]+(\.?[0-9]+)?$">
        <mat-error *ngIf="filterValueInput && filterValueInput.invalid">{{getErrorMessage(filterValueInput)}}</mat-error>
      </mat-form-field>
    </ng-template>

    <ng-template #valuesListField let-options="options" let-operator="operator" let-f="form">
      <div class="py-3">
        <mat-checkbox class="d-block" *ngFor="let option of options" [checked]="isValueChecked(option)" (change)="valueCheckChange(option, $event.checked)">{{getPossibleOptionDisplayText(option)}}</mat-checkbox>
        <mat-error *ngIf="f.submitted && !isAtleastOneValueSelected">{{MUST_SELECT_VALUE_VALIDATION}}</mat-error>
      </div>
    </ng-template>

    <ng-template #booleanField>
      <div class="py-3">
        <!-- Workaround to focus radio buttons -->
        <input style="width: 0px; height: 0px;" cdkFocusInitial (focus)="filterValue == false ? radioButtonFalse.focus() : radioButtonTrue.focus()" autocomplete="off" matInput>
        <mat-radio-group [(ngModel)]="filterValue" name="filterValue">
          <mat-radio-button #radioButtonTrue class="mr-3" [value]="true"><mat-icon class="mt-1">check</mat-icon></mat-radio-button>
          <mat-radio-button #radioButtonFalse [value]="false"><mat-icon class="mt-1">close</mat-icon></mat-radio-button>
        </mat-radio-group>
      </div>
    </ng-template>

    <ng-template #textField>
      <mat-form-field hideRequiredMarker="true" floatLabel="never">
        <input cdkFocusInitial autocomplete="off" matInput [placeholder]="data.labels.value" [errorStateMatcher]="matcher"
          #filterValueInput="ngModel" name="filterValue" [(ngModel)]="filterValue" required>
        <mat-error *ngIf="filterValueInput && filterValueInput.invalid">{{getErrorMessage(filterValueInput)}}</mat-error>
      </mat-form-field>
    </ng-template>

  </form>
</div>
`,
                styles: [`.header{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;background:#3367d6;border-radius:2px 2px 0 0;color:#fff;font-size:15px;min-width:176px;padding:8px}.field-label{padding:0 8px}.icon-button{outline:0}.content{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;display:-webkit-box;display:-ms-flexbox;display:flex;overflow:hidden;padding:24px;min-width:200px;max-height:200px;overflow-y:auto}.footer{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;color:#4285f4;padding:8px 0}::ng-deep .mat-select-value{min-width:24px!important}.mat-auto-width ::ng-deep .mat-form-field{width:auto!important}.mat-auto-width ::ng-deep .mat-form-field-infix{width:auto!important}.mat-auto-width ::ng-deep .mat-select-value{max-width:100%;width:auto}::ng-deep .mat-checkbox:not(.mat-checkbox-disabled).mat-accent .mat-checkbox-ripple .mat-ripple-element{background-color:#4285f4}.mat-checkbox-indeterminate.mat-accent .mat-checkbox-background,::ng-deep .mat-checkbox-checked.mat-accent .mat-checkbox-background{background-color:#4285f4}::ng-deep .mat-radio-button.mat-accent .mat-radio-inner-circle{background-color:#4285f4}::ng-deep .mat-radio-button.mat-accent.mat-radio-checked .mat-radio-outer-circle{border-color:#4285f4}::ng-deep .mat-radio-button.mat-accent .mat-radio-ripple .mat-ripple-element{background-color:rgba(66,133,244,.26)!important}::-webkit-scrollbar{width:6px;background-color:#f5f5f5}::-webkit-scrollbar-thumb{border-radius:10px;-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#d9d9d9}.ltr{direction:ltr}`]
            },] },
];
/** @nocollapse */
FieldFilterPopupDialog.ctorParameters = () => [
    { type: Function, decorators: [{ type: Inject, args: [POPUP_DIALOG_CLOSE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterBarComponent {
    /**
     * @param {?} dataTable
     * @param {?} popupDialogService
     */
    constructor(dataTable, popupDialogService) {
        this.dataTable = dataTable;
        this.popupDialogService = popupDialogService;
        this.filters = [];
        this.fields = this.dataTable.filterableFields;
        if (dataTable.filters) {
            this.filters = dataTable.filters;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    inputFocused(event) {
        ((/** @type {?} */ (event.currentTarget))).blur();
        this.openFieldChooserDialog(event.currentTarget);
    }
    /**
     * @param {?} event
     * @param {?} filter
     * @return {?}
     */
    chipClicked(event, filter) {
        /** @type {?} */
        const dialogRef = this.openFieldFilterDialog(event.currentTarget, filter);
        dialogRef.afterClosed().subscribe((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            if (!result)
                return;
            this.dataTable.filterUpdated.emit({ old: this.convertFilterToEmittedFilter(filter), new: this.convertFilterToEmittedFilter(result) });
            /** @type {?} */
            let index = this.filters.indexOf(filter);
            this.filters[index] = result;
            this.dataTable.filterChanged.emit(this.filters.map((/**
             * @param {?} c
             * @return {?}
             */
            c => this.convertFilterToEmittedFilter(c))));
            filter = result;
        }));
    }
    /**
     * @param {?} triggeredElement
     * @return {?}
     */
    openFieldChooserDialog(triggeredElement) {
        if (this.fieldChooserDialogRef)
            return;
        this.fieldChooserDialogRef = this.popupDialogService.open(FieldFilterChooserPopupDialog, triggeredElement, {
            coverTriggeringElement: true,
            data: {
                fields: this.fields,
                labels: this.dataTable.labels
            }
        });
        this.fieldChooserDialogRef.afterClosed().subscribe((/**
         * @param {?} field
         * @return {?}
         */
        (field) => {
            this.fieldChooserDialogRef = null;
            if (!field)
                return;
            /** @type {?} */
            const dialogRef = this.openFieldFilterDialog(triggeredElement, { field: field });
            dialogRef.afterClosed().subscribe((/**
             * @param {?} filter
             * @return {?}
             */
            (filter) => {
                if (!filter)
                    return;
                this.filters.push(filter);
                this.dataTable.filterAdded.emit(this.convertFilterToEmittedFilter(filter));
                this.dataTable.filterChanged.emit(this.filters.map((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => this.convertFilterToEmittedFilter(c))));
            }));
        }));
    }
    /**
     * @param {?} triggeredElement
     * @param {?=} filter
     * @return {?}
     */
    openFieldFilterDialog(triggeredElement, filter) {
        /** @type {?} */
        const dialogRef = this.popupDialogService.open(FieldFilterPopupDialog, triggeredElement, {
            suppressCloseOnClickSelectors: ['.cdk-overlay-container'],
            coverTriggeringElement: true,
            data: {
                fieldFilter: filter,
                labels: this.dataTable.labels
            }
        });
        return dialogRef;
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    removeFilter(filter) {
        /** @type {?} */
        const index = this.filters.indexOf(filter);
        if (index >= 0) {
            this.filters.splice(index, 1);
            this.dataTable.filterRemoved.emit(this.convertFilterToEmittedFilter(filter));
            this.dataTable.filterChanged.emit(this.filters.map((/**
             * @param {?} c
             * @return {?}
             */
            c => this.convertFilterToEmittedFilter(c))));
        }
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    formatValue(filter) {
        /** @type {?} */
        let value = filter.value;
        if (filter.operator == 'empty')
            return '';
        if (filter.field.dataType == "enum") {
            value = ((/** @type {?} */ (filter.value))).map((/**
             * @param {?} v
             * @return {?}
             */
            v => typeof v === "string" ? v : v.displayText));
        }
        if (Array.isArray(value)) {
            value = value.join(', ');
        }
        return value;
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    formatChipDisplayText(filter) {
        if (filter.field.dataType == "bool") {
            return filter.value == false ? `${this.dataTable.labels.not} ${filter.field.header}` : filter.field.header;
        }
        else {
            return `${filter.field.header} ${this.dataTable.labels.filterOperators[filter.operator]} ${this.formatValue(filter)}`;
        }
    }
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    convertFilterToEmittedFilter(filter) {
        // clone the filter and extract values from enum possible options
        /** @type {?} */
        let clonedFilter = (/** @type {?} */ (JSON.parse(JSON.stringify(filter))));
        if (clonedFilter.operator == "empty")
            return clonedFilter;
        if (clonedFilter.field.dataType == "enum") {
            /** @type {?} */
            let valuesList = clonedFilter.value;
            for (let i = 0; i < valuesList.length; i++) {
                /** @type {?} */
                const value = valuesList[i];
                valuesList[i] = typeof value === "string" ? value : value.value;
            }
        }
        return clonedFilter;
    }
}
FilterBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-bar',
                template: `<div class="filter-bar">
    <div class="px-2 pb-2">
      <mat-chip-list #chipList>
        <i class="fa fa-filter fa-2x filter-icon mr-1" (click)="filterInput.click()"></i>
        <mat-chip *ngFor="let filter of filters" (click)="chipClicked($event, filter)" [removable]="true" (removed)="removeFilter(filter)">
          {{formatChipDisplayText(filter)}}
          <mat-icon matChipRemove>cancel</mat-icon>
        </mat-chip>
        <input #filterInput autocomplete="off" class="filter-input" [placeholder]="dataTable.labels.addFilter" [matChipInputFor]="chipList" (focus)="inputFocused($event)">
      </mat-chip-list>
    </div>
</div>
`,
                styles: [`.filter-input{background-color:transparent;border:0;height:32px;outline:0;padding:0}.filter-icon{color:#3367d6;cursor:pointer}`]
            },] },
];
/** @nocollapse */
FilterBarComponent.ctorParameters = () => [
    { type: DataTableComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => DataTableComponent)),] }] },
    { type: PopupDialogService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// modules
// material
// utils
// components & directives
class DataTableModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: DataTableModule,
            providers: []
        };
    }
}
DataTableModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    DataTableComponent, DataTableColumnDirective,
                    DataTableRowComponent, DataTablePaginationComponent, DataTableHeaderComponent,
                    PixelConverter, HideDirective, MinPipe, FilterBarComponent, FieldFilterChooserPopupDialog,
                    FieldFilterPopupDialog
                ],
                entryComponents: [
                    FieldFilterChooserPopupDialog,
                    FieldFilterPopupDialog
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    {
                        ngModule: NgxPopupDialogModule,
                        providers: [PopupDialogService]
                    },
                    MatFormFieldModule,
                    MatIconModule,
                    MatDialogModule,
                    MatChipsModule,
                    MatInputModule,
                    MatButtonModule,
                    MatListModule,
                    MatSelectModule,
                    MatCheckboxModule,
                    MatRadioModule,
                    MatDatepickerModule,
                    MatNativeDateModule
                ],
                exports: [DataTableComponent, DataTableColumnDirective]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { DataTableModule, DataTableComponent as DataTable, DataTableColumnDirective as DataTableColumn, DataTableRowComponent as DataTableRow, DataTablePaginationComponent as DataTablePagination, DataTableHeaderComponent as DataTableHeader, DataTableResource, FieldFilterChooserPopupDialog as ɵe, FieldFilterPopupDialog as ɵf, FilterBarComponent as ɵd, HideDirective as ɵb, MinPipe as ɵc, PixelConverter as ɵa };
//# sourceMappingURL=angular7-data-table.js.map
