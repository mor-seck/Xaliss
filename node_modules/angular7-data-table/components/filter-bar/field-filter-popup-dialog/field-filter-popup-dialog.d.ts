import { OnInit } from '@angular/core';
import { FormControl, FormGroupDirective, NgForm } from '@angular/forms';
import { ErrorStateMatcher } from '@angular/material/core';
import { DataTableTranslations } from '../../../types/data-table-translations.type';
import { Filter } from '../../../types/filter.type';
interface DialogData {
    fieldFilter: Filter;
    labels: DataTableTranslations;
}
/** Error when invalid control is dirty, touched, or submitted. */
export declare class MyErrorStateMatcher implements ErrorStateMatcher {
    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;
}
export declare class FieldFilterPopupDialog implements OnInit {
    private _dialogCloser;
    data: DialogData;
    MUST_SELECT_VALUE_VALIDATION: string;
    private static numericOperators;
    private static textualOperators;
    private static enumOperators;
    private static boolOperators;
    private static ALL_FILTER_OPERATORS;
    dataType: any;
    filterOperators: any;
    filterValue: any;
    selectedOperator: any;
    valuesList: any[];
    isAtleastOneValueSelected: boolean;
    matcher: MyErrorStateMatcher;
    constructor(_dialogCloser: (dialogResult?: any) => void, data: DialogData);
    ngOnInit(): void;
    onFilterApply(): void;
    valueCheckChange(value: any, checked: boolean): void;
    isValueChecked(value: any): boolean;
    getErrorMessage(field: any): string;
    getPossibleOptionValue(option: any): any;
    getPossibleOptionDisplayText(option: any): any;
    private formatDate;
    private toDate;
}
export {};
