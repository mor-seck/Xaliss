import { ComponentType } from '@angular/cdk/portal';
import { ComponentFactoryResolver, ElementRef, TemplateRef, ViewContainerRef, InjectionToken } from '@angular/core';
import { MatDialogRef } from '@angular/material/dialog';
import { PopupDialogServiceConfig } from './popup-dialog.service';
export declare const POPUP_DIALOG_CLOSE: InjectionToken<(dialogResult: any) => void>;
export declare type Direction = 'ltr' | 'rtl';
export interface PopupDialogConfig extends PopupDialogServiceConfig {
    triggeringElement: any;
    component: ComponentType<any> | TemplateRef<any>;
}
export interface PopupDialogData {
    config: PopupDialogConfig;
    data: any;
}
export declare class PopupDialog {
    private componentFactoryResolver;
    dialogRef: MatDialogRef<PopupDialog>;
    popupContentViewContainer: ViewContainerRef;
    protected dialogContainerRef: ElementRef;
    dialogResult: any;
    visible: boolean;
    isOpened: boolean;
    scaleBottomToTop: boolean;
    direction?: 'ltr' | 'rtl';
    config: PopupDialogConfig;
    data: any;
    constructor(componentFactoryResolver: ComponentFactoryResolver, dialogRef: MatDialogRef<PopupDialog>, data: PopupDialogData);
    scrollBoundedFunction: any;
    onScroll(event: any): void;
    lastClickedElement: any;
    mouseDownHandled: boolean;
    mouseUpHandled: boolean;
    clickHandled: boolean;
    onMouseDown(event: Event): void;
    onMouseUp(event: Event): void;
    onClick(event: Event): void;
    handleMouseEvent(event: Event): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    loadComponent(): void;
    containerTransitionEnd(event: Event): void;
    closeDialog(dialogResult?: any): void;
    private registerOrUnregisterAncestrosScrollEvent;
    private positionDialogWhereTriggeringElement;
    private positionDialogUpIfBottomOutsideViewport;
    private isOutOfViewport;
    private childOf;
}
