(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/overlay'), require('@angular/core'), require('@angular/material/dialog'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('ngx-popup-dialog', ['exports', '@angular/cdk/overlay', '@angular/core', '@angular/material/dialog', '@angular/common', '@angular/forms'], factory) :
    (factory((global['ngx-popup-dialog'] = {}),global.ng.cdk.overlay,global.ng.core,global.ng.material.dialog,global.ng.common,global.ng.forms));
}(this, (function (exports,overlay,core,dialog,common,forms) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var POPUP_DIALOG_CLOSE = new core.InjectionToken('POPUP_DIALOG_CLOSE');
    var PopupDialog = /** @class */ (function () {
        function PopupDialog(componentFactoryResolver, dialogRef, data) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.dialogRef = dialogRef;
            this.visible = false;
            this.isOpened = false;
            this.scaleBottomToTop = false;
            this.scrollBoundedFunction = this.onScroll.bind(this);
            // set events handled to true to ignore event when popup opened for the first time.
            this.mouseDownHandled = true;
            this.mouseUpHandled = true;
            this.clickHandled = true;
            this.config = data.config;
            this.data = data.data;
            this.direction = data.config.direction || ( /** @type {?} */(getComputedStyle(this.config.triggeringElement).direction));
        }
        /**
         * @param {?} event
         * @return {?}
         */
        PopupDialog.prototype.onScroll = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.positionDialogWhereTriggeringElement();
                this.positionDialogUpIfBottomOutsideViewport();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        PopupDialog.prototype.onMouseDown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.handleMouseEvent(event);
                this.mouseDownHandled = true;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        PopupDialog.prototype.onMouseUp = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.mouseDownHandled || this.clickHandled) {
                    this.mouseDownHandled = false;
                    this.clickHandled = false;
                    return;
                }
                this.handleMouseEvent(event);
                this.mouseUpHandled = true;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        PopupDialog.prototype.onClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.mouseDownHandled || this.mouseUpHandled) {
                    this.mouseDownHandled = false;
                    this.mouseUpHandled = false;
                    return;
                }
                this.handleMouseEvent(event);
                this.clickHandled = true;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        PopupDialog.prototype.handleMouseEvent = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                if (!this.isOpened)
                    return;
                // Clicking on element will trigger this callback function multiple times (for mouse down, up and click)
                // Therefor, we stop execution if we get the same event target.
                // We reset the lastClickedElement after 100 ms
                if (this.lastClickedElement == event.target)
                    return;
                this.lastClickedElement = event.target;
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    _this.lastClickedElement = null;
                }), 200);
                /** @type {?} */
                var container = this.dialogContainerRef.nativeElement;
                if (container === event.target || this.childOf(event.target, container)) {
                    return;
                }
                if (this.config.suppressCloseOnClickSelectors) {
                    for (var i = 0; i < this.config.suppressCloseOnClickSelectors.length; i++) {
                        /** @type {?} */
                        var selector = this.config.suppressCloseOnClickSelectors[i];
                        /** @type {?} */
                        var elements = document.querySelectorAll(selector);
                        for (var i_1 = 0; i_1 < elements.length; i_1++) {
                            /** @type {?} */
                            var elem = elements[i_1];
                            if (elem === event.target || this.childOf(event.target, elem)) {
                                return;
                            }
                        }
                    }
                }
                this.closeDialog();
            };
        /**
         * @return {?}
         */
        PopupDialog.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.registerOrUnregisterAncestrosScrollEvent();
                this.loadComponent();
                this.dialogRef.beforeClose().subscribe(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) {
                    _this.visible = false;
                    _this.isOpened = false;
                }));
                this.dialogRef.afterOpen().subscribe(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) {
                    _this.isOpened = true;
                }));
                this.positionDialogWhereTriggeringElement();
                this.positionDialogUpIfBottomOutsideViewport();
                this.visible = true;
            };
        /**
         * @return {?}
         */
        PopupDialog.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.registerOrUnregisterAncestrosScrollEvent(false);
            };
        /**
         * @return {?}
         */
        PopupDialog.prototype.loadComponent = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var componentFactory = this.componentFactoryResolver.resolveComponentFactory(( /** @type {?} */(this.config.component)));
                this.popupContentViewContainer.clear();
                /** @type {?} */
                var injector = core.ReflectiveInjector.resolveAndCreate([
                    {
                        provide: dialog.MAT_DIALOG_DATA,
                        useValue: this.data || {}
                    },
                    {
                        provide: POPUP_DIALOG_CLOSE,
                        useValue: this.closeDialog.bind(this)
                    }
                ]);
                /** @type {?} */
                var componentRef = this.popupContentViewContainer.createComponent(componentFactory, 0, injector);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        PopupDialog.prototype.containerTransitionEnd = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (event.target == this.dialogContainerRef.nativeElement && !this.visible) {
                    this.dialogRef.close(this.dialogResult);
                }
            };
        /**
         * @param {?=} dialogResult
         * @return {?}
         */
        PopupDialog.prototype.closeDialog = /**
         * @param {?=} dialogResult
         * @return {?}
         */
            function (dialogResult) {
                this.dialogResult = dialogResult;
                this.visible = false;
                this.isOpened = false;
            };
        /**
         * @private
         * @param {?=} register
         * @return {?}
         */
        PopupDialog.prototype.registerOrUnregisterAncestrosScrollEvent = /**
         * @private
         * @param {?=} register
         * @return {?}
         */
            function (register) {
                if (register === void 0) {
                    register = true;
                }
                /** @type {?} */
                var elem = (( /** @type {?} */(this.config.triggeringElement))).parentNode;
                while (elem !== null) {
                    register ?
                        elem.addEventListener("scroll", this.scrollBoundedFunction) :
                        elem.removeEventListener("scroll", this.scrollBoundedFunction);
                    elem = elem.parentNode;
                }
            };
        /**
         * @private
         * @return {?}
         */
        PopupDialog.prototype.positionDialogWhereTriggeringElement = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var matDialogConfig = new dialog.MatDialogConfig();
                /** @type {?} */
                var rect = this.config.triggeringElement.getBoundingClientRect();
                /** @type {?} */
                var top = this.config.coverTriggeringElement ?
                    rect.bottom - this.config.triggeringElement.offsetHeight - 1 :
                    rect.bottom;
                matDialogConfig.position = { top: top + "px" };
                if (this.direction == 'rtl') {
                    /** @type {?} */
                    var right = window.innerWidth - rect.left - this.config.triggeringElement.offsetWidth;
                    matDialogConfig.position.right = right + "px";
                }
                else {
                    matDialogConfig.position.left = rect.left + "px";
                }
                this.dialogRef.updatePosition(matDialogConfig.position);
            };
        /**
         * @private
         * @return {?}
         */
        PopupDialog.prototype.positionDialogUpIfBottomOutsideViewport = /**
         * @private
         * @return {?}
         */
            function () {
                if (!this.config.scaleToTopOnBottomOverflow)
                    return;
                /** @type {?} */
                var dialogContainerElem = ( /** @type {?} */(this.dialogContainerRef.nativeElement));
                /** @type {?} */
                var result = this.isOutOfViewport();
                if (result.bottom && !result.topIfScaleToTop) {
                    this.scaleBottomToTop = true;
                    /** @type {?} */
                    var matDialogConfig = new dialog.MatDialogConfig();
                    /** @type {?} */
                    var rect = dialogContainerElem.getBoundingClientRect();
                    /** @type {?} */
                    var triggeringElementHeight = this.config.triggeringElement.offsetHeight;
                    /** @type {?} */
                    var top_1 = this.config.coverTriggeringElement ?
                        rect.top - dialogContainerElem.offsetHeight + triggeringElementHeight + 1 :
                        rect.top - dialogContainerElem.offsetHeight - triggeringElementHeight;
                    matDialogConfig.position = { top: top_1 + "px" };
                    if (this.direction == 'rtl') {
                        /** @type {?} */
                        var right = window.innerWidth - rect.left - this.config.triggeringElement.offsetWidth;
                        matDialogConfig.position.right = right + "px";
                    }
                    else {
                        matDialogConfig.position.left = rect.left + "px";
                    }
                    this.dialogRef.updatePosition(matDialogConfig.position);
                }
                else {
                    this.scaleBottomToTop = false;
                }
            };
        /**
         * @private
         * @return {?}
         */
        PopupDialog.prototype.isOutOfViewport = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var container = this.dialogContainerRef.nativeElement;
                /** @type {?} */
                var triggeringElement = this.config.triggeringElement;
                // Get element's bounding
                /** @type {?} */
                var bounding = container.getBoundingClientRect();
                // reduce height from top position if scale to top
                /** @type {?} */
                var top = bounding.top;
                if (this.scaleBottomToTop) {
                    top = this.config.coverTriggeringElement ?
                        bounding.top - container.offsetHeight + triggeringElement.offsetHeight :
                        bounding.top - container.offsetHeight - triggeringElement.offsetHeight;
                }
                /** @type {?} */
                var topIfScaleToTop = top;
                if (!this.scaleBottomToTop) {
                    topIfScaleToTop = top - (this.config.coverTriggeringElement ? container.offsetHeight - triggeringElement.offsetHeight : container.offsetHeight + triggeringElement.offsetHeight);
                }
                /** @type {?} */
                var out = {};
                out.top = top < 0;
                out.topIfScaleToTop = topIfScaleToTop < 0;
                out.left = bounding.left < 0;
                out.bottom = (bounding.top + container.offsetHeight) > (window.innerHeight || document.documentElement.offsetHeight);
                if (this.scaleBottomToTop && !out.bottom) {
                    if (!out.top)
                        out.bottom = true;
                }
                out.right = (bounding.left + container.offsetWidth) > (window.innerWidth || document.documentElement.offsetWidth);
                out.any = out.top || out.left || out.bottom || out.right;
                out.all = out.top && out.left && out.bottom && out.right;
                return out;
            };
        /**
         * @private
         * @param {?} node
         * @param {?} ancestor
         * @return {?}
         */
        PopupDialog.prototype.childOf = /**
         * @private
         * @param {?} node
         * @param {?} ancestor
         * @return {?}
         */
            function (node, ancestor) {
                /** @type {?} */
                var child = node;
                while (child !== null) {
                    if (child === ancestor)
                        return true;
                    child = child.parentNode;
                }
                return false;
            };
        PopupDialog.decorators = [
            { type: core.Component, args: [{
                        selector: 'popup-dialog',
                        template: "<div #dialogContainer [attr.dir]=\"direction == 'rtl' ? 'rtl' : ''\" (transitionend)=\"containerTransitionEnd($event)\"\n class=\"ngx-popup-dialog-container\" [ngClass]=\"{'visible': visible, 'scale-to-top': scaleBottomToTop, 'rtl': direction == 'rtl'}\"\n [style.max-width]=\"config.maxWidth\" [style.max-height]=\"config.maxHeight\">\n  <ng-template #popupContent></ng-template>\n</div>\n",
                        encapsulation: core.ViewEncapsulation.None,
                        styles: [".ngx-popup-dialog-overlay{display:block}.ngx-popup-dialog-overlay .mat-dialog-container{display:inline;padding:0}.ngx-popup-dialog-container{box-shadow:0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12),0 2px 4px -1px rgba(0,0,0,.2);background:#fff;border-radius:2px;overflow:auto;transition:transform 150ms cubic-bezier(.4,0,1,1);transition:transform 150ms cubic-bezier(.4,0,1,1),-webkit-transform 150ms cubic-bezier(.4,0,1,1);-webkit-transform-origin:top left;transform-origin:top left;-webkit-transform:scale3d(0,0,1);transform:scale3d(0,0,1)}.ngx-popup-dialog-container.rtl{-webkit-transform-origin:top right;transform-origin:top right;direction:rtl}.ngx-popup-dialog-container.visible{transition:transform 150ms cubic-bezier(0,0,.2,1);transition:transform 150ms cubic-bezier(0,0,.2,1),-webkit-transform 150ms cubic-bezier(0,0,.2,1);-webkit-transform:scale3d(1,1,1);transform:scale3d(1,1,1)}.ngx-popup-dialog-container.scale-to-top{-webkit-transform-origin:left bottom 0;transform-origin:left bottom 0}.ngx-popup-dialog-container.rtl.scale-to-top{-webkit-transform-origin:right bottom 0;transform-origin:right bottom 0}.ngx-popup-dialog-container::-webkit-scrollbar{width:6px;background-color:#f5f5f5}.ngx-popup-dialog-container::-webkit-scrollbar-thumb{border-radius:10px;-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#d9d9d9}"]
                    }] }
        ];
        /** @nocollapse */
        PopupDialog.ctorParameters = function () {
            return [
                { type: core.ComponentFactoryResolver },
                { type: dialog.MatDialogRef },
                { type: undefined, decorators: [{ type: core.Inject, args: [dialog.MAT_DIALOG_DATA,] }] }
            ];
        };
        PopupDialog.propDecorators = {
            popupContentViewContainer: [{ type: core.ViewChild, args: ['popupContent', { read: core.ViewContainerRef },] }],
            dialogContainerRef: [{ type: core.ViewChild, args: ['dialogContainer',] }],
            onMouseDown: [{ type: core.HostListener, args: ['document:mousedown', ['$event'],] }],
            onMouseUp: [{ type: core.HostListener, args: ['document:mouseup', ['$event'],] }],
            onClick: [{ type: core.HostListener, args: ['document:click', ['$event'],] }]
        };
        return PopupDialog;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PopupDialogService = /** @class */ (function () {
        function PopupDialogService(_overlay, _dialogService) {
            this._overlay = _overlay;
            this._dialogService = _dialogService;
        }
        /**
         * @template T
         * @param {?} componentOrTemplateRef
         * @param {?} triggeringElement
         * @param {?=} config
         * @return {?}
         */
        PopupDialogService.prototype.open = /**
         * @template T
         * @param {?} componentOrTemplateRef
         * @param {?} triggeringElement
         * @param {?=} config
         * @return {?}
         */
            function (componentOrTemplateRef, triggeringElement, config) {
                if (!config)
                    config = {};
                /** @type {?} */
                var data = config.data;
                delete config.data;
                /** @type {?} */
                var popupDialogData = {
                    config: __assign({}, config, { component: componentOrTemplateRef, triggeringElement: triggeringElement, maxWidth: (typeof config.maxWidth === "number") ? config.maxWidth + 'px' : config.maxWidth, maxHeight: (typeof config.maxHeight === "number") ? config.maxHeight + 'px' : config.maxHeight, scaleToTopOnBottomOverflow: config.scaleToTopOnBottomOverflow == null ? true : config.scaleToTopOnBottomOverflow, suppressCloseOnClickSelectors: typeof config.suppressCloseOnClickSelectors === "string" ? [config.suppressCloseOnClickSelectors] : config.suppressCloseOnClickSelectors }),
                    data: data
                };
                /** @type {?} */
                var popupDialogConfig = {
                    backdropClass: 'cdk-overlay-transparent-backdrop',
                    hasBackdrop: false,
                    scrollStrategy: this._overlay.scrollStrategies.noop(),
                    panelClass: 'ngx-popup-dialog-overlay',
                    restoreFocus: false,
                    data: popupDialogData
                };
                /** @type {?} */
                var dialogRef = this._dialogService.open(PopupDialog, popupDialogConfig);
                return dialogRef;
            };
        PopupDialogService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        PopupDialogService.ctorParameters = function () {
            return [
                { type: overlay.Overlay },
                { type: dialog.MatDialog }
            ];
        };
        return PopupDialogService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxPopupDialogModule = /** @class */ (function () {
        function NgxPopupDialogModule() {
        }
        /**
         * @return {?}
         */
        NgxPopupDialogModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: NgxPopupDialogModule,
                    providers: [PopupDialogService]
                };
            };
        NgxPopupDialogModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [PopupDialog],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            dialog.MatDialogModule
                        ],
                        entryComponents: [PopupDialog],
                        exports: []
                    },] }
        ];
        return NgxPopupDialogModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgxPopupDialogModule = NgxPopupDialogModule;
    exports.PopupDialogService = PopupDialogService;
    exports.POPUP_DIALOG_CLOSE = POPUP_DIALOG_CLOSE;
    exports.ɵa = PopupDialog;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-popup-dialog.umd.js.map