/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Overlay } from '@angular/cdk/overlay';
import { Injectable } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { PopupDialog } from './popup-dialog';
/**
 * @record
 */
export function PopupDialogServiceConfig() { }
if (false) {
    /** @type {?|undefined} */
    PopupDialogServiceConfig.prototype.direction;
    /** @type {?|undefined} */
    PopupDialogServiceConfig.prototype.coverTriggeringElement;
    /** @type {?|undefined} */
    PopupDialogServiceConfig.prototype.scaleToTopOnBottomOverflow;
    /** @type {?|undefined} */
    PopupDialogServiceConfig.prototype.maxWidth;
    /** @type {?|undefined} */
    PopupDialogServiceConfig.prototype.maxHeight;
    /** @type {?|undefined} */
    PopupDialogServiceConfig.prototype.suppressCloseOnClickSelectors;
}
/**
 * @record
 */
export function PopupDialogConfig() { }
if (false) {
    /** @type {?|undefined} */
    PopupDialogConfig.prototype.data;
}
export class PopupDialogService {
    /**
     * @param {?} _overlay
     * @param {?} _dialogService
     */
    constructor(_overlay, _dialogService) {
        this._overlay = _overlay;
        this._dialogService = _dialogService;
    }
    /**
     * @template T
     * @param {?} componentOrTemplateRef
     * @param {?} triggeringElement
     * @param {?=} config
     * @return {?}
     */
    open(componentOrTemplateRef, triggeringElement, config) {
        if (!config)
            config = {};
        /** @type {?} */
        let data = config.data;
        delete config.data;
        /** @type {?} */
        const popupDialogData = {
            config: Object.assign({}, config, { component: componentOrTemplateRef, triggeringElement: triggeringElement, maxWidth: (typeof config.maxWidth === "number") ? config.maxWidth + 'px' : config.maxWidth, maxHeight: (typeof config.maxHeight === "number") ? config.maxHeight + 'px' : config.maxHeight, scaleToTopOnBottomOverflow: config.scaleToTopOnBottomOverflow == null ? true : config.scaleToTopOnBottomOverflow, suppressCloseOnClickSelectors: typeof config.suppressCloseOnClickSelectors === "string" ? [config.suppressCloseOnClickSelectors] : config.suppressCloseOnClickSelectors }),
            data: data
        };
        /** @type {?} */
        const popupDialogConfig = {
            backdropClass: 'cdk-overlay-transparent-backdrop',
            hasBackdrop: false,
            scrollStrategy: this._overlay.scrollStrategies.noop(),
            panelClass: 'ngx-popup-dialog-overlay',
            restoreFocus: false,
            data: popupDialogData
        };
        /** @type {?} */
        let dialogRef = this._dialogService.open(PopupDialog, popupDialogConfig);
        return dialogRef;
    }
}
PopupDialogService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PopupDialogService.ctorParameters = () => [
    { type: Overlay },
    { type: MatDialog }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PopupDialogService.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    PopupDialogService.prototype._dialogService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdXAtZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcG9wdXAtZGlhbG9nLyIsInNvdXJjZXMiOlsibGliL3BvcHVwLWRpYWxvZy9wb3B1cC1kaWFsb2cuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxVQUFVLEVBQWUsTUFBTSxlQUFlLENBQUM7QUFDeEQsT0FBTyxFQUFFLFNBQVMsRUFBaUMsTUFBTSwwQkFBMEIsQ0FBQztBQUVwRixPQUFPLEVBQWEsV0FBVyxFQUFtQixNQUFNLGdCQUFnQixDQUFDOzs7O0FBRXpFLDhDQU9DOzs7SUFOQyw2Q0FBc0I7O0lBQ3RCLDBEQUFpQzs7SUFDakMsOERBQXFDOztJQUNyQyw0Q0FBMkI7O0lBQzNCLDZDQUE0Qjs7SUFDNUIsaUVBQWtEOzs7OztBQUdwRCx1Q0FFQzs7O0lBREMsaUNBQVc7O0FBSWIsTUFBTSxPQUFPLGtCQUFrQjs7Ozs7SUFDN0IsWUFDVSxRQUFpQixFQUNqQixjQUF5QjtRQUR6QixhQUFRLEdBQVIsUUFBUSxDQUFTO1FBQ2pCLG1CQUFjLEdBQWQsY0FBYyxDQUFXO0lBQUksQ0FBQzs7Ozs7Ozs7SUFFeEMsSUFBSSxDQUFJLHNCQUF5RCxFQUFFLGlCQUFpQixFQUFFLE1BQTBCO1FBQzlHLElBQUksQ0FBQyxNQUFNO1lBQUUsTUFBTSxHQUFHLEVBQUUsQ0FBQzs7WUFFckIsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJO1FBQ3RCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQzs7Y0FDYixlQUFlLEdBQW9CO1lBQ3ZDLE1BQU0sb0JBQ0QsTUFBTSxJQUNULFNBQVMsRUFBRSxzQkFBc0IsRUFDakMsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQ3BDLFFBQVEsRUFBRSxDQUFDLE9BQU8sTUFBTSxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQzFGLFNBQVMsRUFBRSxDQUFDLE9BQU8sTUFBTSxDQUFDLFNBQVMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQzlGLDBCQUEwQixFQUFFLE1BQU0sQ0FBQywwQkFBMEIsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLDBCQUEwQixFQUNoSCw2QkFBNkIsRUFBRSxPQUFPLE1BQU0sQ0FBQyw2QkFBNkIsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyw2QkFBNkIsR0FDeEs7WUFDRCxJQUFJLEVBQUUsSUFBSTtTQUNYOztjQUNLLGlCQUFpQixHQUFvQjtZQUN6QyxhQUFhLEVBQUUsa0NBQWtDO1lBQ2pELFdBQVcsRUFBRSxLQUFLO1lBQ2xCLGNBQWMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRTtZQUNyRCxVQUFVLEVBQUUsMEJBQTBCO1lBQ3RDLFlBQVksRUFBRSxLQUFLO1lBQ25CLElBQUksRUFBRSxlQUFlO1NBQ3RCOztZQUNHLFNBQVMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsaUJBQWlCLENBQUM7UUFDeEUsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQzs7O1lBakNGLFVBQVU7Ozs7WUFwQkYsT0FBTztZQUdQLFNBQVM7Ozs7Ozs7SUFvQmQsc0NBQXlCOzs7OztJQUN6Qiw0Q0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPdmVybGF5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ29tcG9uZW50VHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wb3J0YWwnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdERpYWxvZywgTWF0RGlhbG9nQ29uZmlnLCBNYXREaWFsb2dSZWYgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuXG5pbXBvcnQgeyBEaXJlY3Rpb24sIFBvcHVwRGlhbG9nLCBQb3B1cERpYWxvZ0RhdGEgfSBmcm9tICcuL3BvcHVwLWRpYWxvZyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9wdXBEaWFsb2dTZXJ2aWNlQ29uZmlnIHtcbiAgZGlyZWN0aW9uPzogRGlyZWN0aW9uO1xuICBjb3ZlclRyaWdnZXJpbmdFbGVtZW50PzogYm9vbGVhbjtcbiAgc2NhbGVUb1RvcE9uQm90dG9tT3ZlcmZsb3c/OiBib29sZWFuO1xuICBtYXhXaWR0aD86IG51bWJlciB8IHN0cmluZztcbiAgbWF4SGVpZ2h0PzogbnVtYmVyIHwgc3RyaW5nO1xuICBzdXBwcmVzc0Nsb3NlT25DbGlja1NlbGVjdG9ycz86IHN0cmluZyB8IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBvcHVwRGlhbG9nQ29uZmlnIGV4dGVuZHMgUG9wdXBEaWFsb2dTZXJ2aWNlQ29uZmlnIHtcbiAgZGF0YT86IGFueTtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvcHVwRGlhbG9nU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX292ZXJsYXk6IE92ZXJsYXksXG4gICAgcHJpdmF0ZSBfZGlhbG9nU2VydmljZTogTWF0RGlhbG9nKSB7IH1cblxuICBvcGVuPFQ+KGNvbXBvbmVudE9yVGVtcGxhdGVSZWY6IENvbXBvbmVudFR5cGU8VD4gfCBUZW1wbGF0ZVJlZjxUPiwgdHJpZ2dlcmluZ0VsZW1lbnQsIGNvbmZpZz86IFBvcHVwRGlhbG9nQ29uZmlnKTogTWF0RGlhbG9nUmVmPFBvcHVwRGlhbG9nPiB7XG4gICAgaWYgKCFjb25maWcpIGNvbmZpZyA9IHt9O1xuXG4gICAgbGV0IGRhdGEgPSBjb25maWcuZGF0YTtcbiAgICBkZWxldGUgY29uZmlnLmRhdGE7XG4gICAgY29uc3QgcG9wdXBEaWFsb2dEYXRhOiBQb3B1cERpYWxvZ0RhdGEgPSB7XG4gICAgICBjb25maWc6IHtcbiAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICBjb21wb25lbnQ6IGNvbXBvbmVudE9yVGVtcGxhdGVSZWYsXG4gICAgICAgIHRyaWdnZXJpbmdFbGVtZW50OiB0cmlnZ2VyaW5nRWxlbWVudCxcbiAgICAgICAgbWF4V2lkdGg6ICh0eXBlb2YgY29uZmlnLm1heFdpZHRoID09PSBcIm51bWJlclwiKSA/IGNvbmZpZy5tYXhXaWR0aCArICdweCcgOiBjb25maWcubWF4V2lkdGgsXG4gICAgICAgIG1heEhlaWdodDogKHR5cGVvZiBjb25maWcubWF4SGVpZ2h0ID09PSBcIm51bWJlclwiKSA/IGNvbmZpZy5tYXhIZWlnaHQgKyAncHgnIDogY29uZmlnLm1heEhlaWdodCxcbiAgICAgICAgc2NhbGVUb1RvcE9uQm90dG9tT3ZlcmZsb3c6IGNvbmZpZy5zY2FsZVRvVG9wT25Cb3R0b21PdmVyZmxvdyA9PSBudWxsID8gdHJ1ZSA6IGNvbmZpZy5zY2FsZVRvVG9wT25Cb3R0b21PdmVyZmxvdyxcbiAgICAgICAgc3VwcHJlc3NDbG9zZU9uQ2xpY2tTZWxlY3RvcnM6IHR5cGVvZiBjb25maWcuc3VwcHJlc3NDbG9zZU9uQ2xpY2tTZWxlY3RvcnMgPT09IFwic3RyaW5nXCIgPyBbY29uZmlnLnN1cHByZXNzQ2xvc2VPbkNsaWNrU2VsZWN0b3JzXSA6IGNvbmZpZy5zdXBwcmVzc0Nsb3NlT25DbGlja1NlbGVjdG9yc1xuICAgICAgfSxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9XG4gICAgY29uc3QgcG9wdXBEaWFsb2dDb25maWc6IE1hdERpYWxvZ0NvbmZpZyA9IHtcbiAgICAgIGJhY2tkcm9wQ2xhc3M6ICdjZGstb3ZlcmxheS10cmFuc3BhcmVudC1iYWNrZHJvcCcsXG4gICAgICBoYXNCYWNrZHJvcDogZmFsc2UsXG4gICAgICBzY3JvbGxTdHJhdGVneTogdGhpcy5fb3ZlcmxheS5zY3JvbGxTdHJhdGVnaWVzLm5vb3AoKSxcbiAgICAgIHBhbmVsQ2xhc3M6ICduZ3gtcG9wdXAtZGlhbG9nLW92ZXJsYXknLFxuICAgICAgcmVzdG9yZUZvY3VzOiBmYWxzZSxcbiAgICAgIGRhdGE6IHBvcHVwRGlhbG9nRGF0YVxuICAgIH1cbiAgICBsZXQgZGlhbG9nUmVmID0gdGhpcy5fZGlhbG9nU2VydmljZS5vcGVuKFBvcHVwRGlhbG9nLCBwb3B1cERpYWxvZ0NvbmZpZyk7XG4gICAgcmV0dXJuIGRpYWxvZ1JlZjtcbiAgfVxufVxuIl19